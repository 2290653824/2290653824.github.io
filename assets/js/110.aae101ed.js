(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{435:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"redis-生产问题-重要"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis-生产问题-重要"}},[s._v("#")]),s._v(" Redis 生产问题（重要）")]),s._v(" "),t("h3",{attrs:{id:"缓存穿透"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透"}},[s._v("#")]),s._v(" 缓存穿透")]),s._v(" "),t("h4",{attrs:{id:"什么是缓存穿透"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是缓存穿透"}},[s._v("#")]),s._v(" 什么是缓存穿透？")]),s._v(" "),t("p",[s._v("缓存穿透说简单点就是大量请求的 key 是不合理的，"),t("strong",[s._v("根本不存在于缓存中，也不存在于数据库中")]),s._v(" 。这就导致这些请求直接到了数据库上，根本没有经过缓存这一层，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230623184719484.png",alt:"image-20230623184719484"}}),s._v("缓存穿透")]),s._v(" "),t("p",[s._v("举个例子：某个黑客故意制造一些非法的 key 发起大量请求，导致大量请求落到数据库，结果数据库上也没有查到对应的数据。也就是说这些请求最终都落到了数据库上，对数据库造成了巨大的压力。")]),s._v(" "),t("h4",{attrs:{id:"有哪些解决办法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有哪些解决办法"}},[s._v("#")]),s._v(" 有哪些解决办法？")]),s._v(" "),t("p",[s._v("最基本的就是首先做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。比如查询的数据库 id 不能小于 0、传入的邮箱格式不对的时候直接返回错误消息给客户端等等。")]),s._v(" "),t("p",[t("strong",[s._v("1）缓存无效 key")])]),s._v(" "),t("p",[s._v("如果缓存和数据库都查不到某个 key 的数据就写一个到 Redis 中去并设置过期时间，具体命令如下："),t("code",[s._v("SET key value EX 10086")]),s._v(" 。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key 。很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。")]),s._v(" "),t("p",[s._v("另外，这里多说一嘴，一般情况下我们是这样设计 key 的："),t("code",[s._v("表名:列名:主键名:主键值")]),s._v(" 。")]),s._v(" "),t("p",[s._v("如果用 Java 代码展示的话，差不多是下面这样的：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getObjectInclNullById")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从缓存中获取数据")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" cacheValue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 缓存为空")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cacheValue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从数据库中获取")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" storageValue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" storage"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 缓存空对象")]),s._v("\n        cache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" storageValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果存储数据为空，需要设置一个过期时间(300秒)")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("storageValue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 必须设置过期时间，否则有被攻击的风险")]),s._v("\n            cache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("expire")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" storageValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" cacheValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[t("strong",[s._v("2）布隆过滤器")])]),s._v(" "),t("p",[s._v("布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中。我们需要的就是判断 key 是否合法，有没有感觉布隆过滤器就是我们想要找的那个“人”。")]),s._v(" "),t("p",[s._v("具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。")]),s._v(" "),t("p",[s._v("加入布隆过滤器之后的缓存处理流程图如下。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230623184734108.png",alt:"image-20230623184734108"}}),s._v("加入布隆过滤器之后的缓存处理流程图")]),s._v(" "),t("p",[s._v("但是，需要注意的是布隆过滤器可能会存在误判的情况。总结来说就是："),t("strong",[s._v("布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。")])]),s._v(" "),t("p",[t("em",[s._v("为什么会出现误判的情况呢? 我们还要从布隆过滤器的原理来说！")])]),s._v(" "),t("p",[s._v("我们先来看一下，"),t("strong",[s._v("当一个元素加入布隆过滤器中的时候，会进行哪些操作：")])]),s._v(" "),t("ol",[t("li",[s._v("使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。")]),s._v(" "),t("li",[s._v("根据得到的哈希值，在位数组中把对应下标的值置为 1。")])]),s._v(" "),t("p",[s._v("我们再来看一下，"),t("strong",[s._v("当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行哪些操作：")])]),s._v(" "),t("ol",[t("li",[s._v("对给定元素再次进行相同的哈希计算；")]),s._v(" "),t("li",[s._v("得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。")])]),s._v(" "),t("p",[s._v("然后，一定会出现这样一种情况："),t("strong",[s._v("不同的字符串可能哈希出来的位置相同。")]),s._v(" （可以适当增加位数组大小或者调整我们的哈希函数来降低概率）")]),s._v(" "),t("p",[s._v("更多关于布隆过滤器的内容可以看我的这篇原创："),t("a",{attrs:{href:"https://javaguide.cn/cs-basics/data-structure/bloom-filter/",target:"_blank",rel:"noopener noreferrer"}},[s._v("《不了解布隆过滤器？一文给你整的明明白白！》open in new window"),t("OutboundLink")],1),s._v(" ，强烈推荐，个人感觉网上应该找不到总结的这么明明白白的文章了。")]),s._v(" "),t("h3",{attrs:{id:"缓存击穿"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存击穿"}},[s._v("#")]),s._v(" 缓存击穿")]),s._v(" "),t("h4",{attrs:{id:"什么是缓存击穿"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是缓存击穿"}},[s._v("#")]),s._v(" 什么是缓存击穿？")]),s._v(" "),t("p",[s._v("缓存击穿中，请求的 key 对应的是 "),t("strong",[s._v("热点数据")]),s._v(" ，该数据 "),t("strong",[s._v("存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期）")]),s._v(" 。这就可能会导致瞬时大量的请求直接打到了数据库上，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230623184746935.png",alt:"image-20230623184746935"}}),s._v("缓存击穿")]),s._v(" "),t("p",[s._v("举个例子：秒杀进行过程中，缓存中的某个秒杀商品的数据突然过期，这就导致瞬时大量对该商品的请求直接落到数据库上，对数据库造成了巨大的压力。")]),s._v(" "),t("h4",{attrs:{id:"有哪些解决办法-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有哪些解决办法-2"}},[s._v("#")]),s._v(" 有哪些解决办法？")]),s._v(" "),t("ul",[t("li",[s._v("设置热点数据永不过期或者过期时间比较长。")]),s._v(" "),t("li",[s._v("针对热点数据提前预热，将其存入缓存中并设置合理的过期时间比如秒杀场景下的数据在秒杀结束之前不过期。")]),s._v(" "),t("li",[s._v("请求数据库写数据到缓存之前，先获取互斥锁，保证只有一个请求会落到数据库上，减少数据库的压力。")])]),s._v(" "),t("h4",{attrs:{id:"缓存穿透和缓存击穿有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透和缓存击穿有什么区别"}},[s._v("#")]),s._v(" 缓存穿透和缓存击穿有什么区别？")]),s._v(" "),t("p",[s._v("缓存穿透中，请求的 key 既不存在于缓存中，也不存在于数据库中。")]),s._v(" "),t("p",[s._v("缓存击穿中，请求的 key 对应的是 "),t("strong",[s._v("热点数据")]),s._v(" ，该数据 "),t("strong",[s._v("存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期）")]),s._v(" 。")]),s._v(" "),t("h3",{attrs:{id:"缓存雪崩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩"}},[s._v("#")]),s._v(" 缓存雪崩")]),s._v(" "),t("h4",{attrs:{id:"什么是缓存雪崩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是缓存雪崩"}},[s._v("#")]),s._v(" 什么是缓存雪崩？")]),s._v(" "),t("p",[s._v("我发现缓存雪崩这名字起的有点意思，哈哈。")]),s._v(" "),t("p",[s._v("实际上，缓存雪崩描述的就是这样一个简单的场景："),t("strong",[s._v("缓存在同一时间大面积的失效，导致大量的请求都直接落到了数据库上，对数据库造成了巨大的压力。")]),s._v(" 这就好比雪崩一样，摧枯拉朽之势，数据库的压力可想而知，可能直接就被这么多请求弄宕机了。")]),s._v(" "),t("p",[s._v("另外，缓存服务宕机也会导致缓存雪崩现象，导致所有的请求都落到了数据库上。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230623184755410.png",alt:"image-20230623184755410"}}),s._v("缓存雪崩")]),s._v(" "),t("p",[s._v("举个例子：数据库中的大量数据在同一时间过期，这个时候突然有大量的请求需要访问这些过期的数据。这就导致大量的请求直接落到数据库上，对数据库造成了巨大的压力。")]),s._v(" "),t("h4",{attrs:{id:"有哪些解决办法-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有哪些解决办法-3"}},[s._v("#")]),s._v(" 有哪些解决办法？")]),s._v(" "),t("p",[t("strong",[s._v("针对 Redis 服务不可用的情况：")])]),s._v(" "),t("ol",[t("li",[s._v("采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。")]),s._v(" "),t("li",[s._v("限流，避免同时处理大量的请求。")])]),s._v(" "),t("p",[t("strong",[s._v("针对热点缓存失效的情况：")])]),s._v(" "),t("ol",[t("li",[s._v("设置不同的失效时间比如随机设置缓存的失效时间。")]),s._v(" "),t("li",[s._v("缓存永不失效（不太推荐，实用性太差）。")]),s._v(" "),t("li",[s._v("设置二级缓存。")])]),s._v(" "),t("h4",{attrs:{id:"缓存雪崩和缓存击穿有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩和缓存击穿有什么区别"}},[s._v("#")]),s._v(" 缓存雪崩和缓存击穿有什么区别？")]),s._v(" "),t("p",[s._v("缓存雪崩和缓存击穿比较像，但缓存雪崩导致的原因是缓存中的大量或者所有数据失效，缓存击穿导致的原因主要是某个热点数据不存在与缓存中（通常是因为缓存中的那份数据已经过期）。")]),s._v(" "),t("h3",{attrs:{id:"如何保证缓存和数据库数据的一致性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何保证缓存和数据库数据的一致性"}},[s._v("#")]),s._v(" 如何保证缓存和数据库数据的一致性？")]),s._v(" "),t("p",[s._v("细说的话可以扯很多，但是我觉得其实没太大必要（小声 BB：很多解决方案我也没太弄明白）。我个人觉得引入缓存之后，如果为了短时间的不一致性问题，选择让系统设计变得更加复杂的话，完全没必要。")]),s._v(" "),t("p",[s._v("下面单独对 "),t("strong",[s._v("Cache Aside Pattern（旁路缓存模式）")]),s._v(" 来聊聊。")]),s._v(" "),t("p",[s._v("Cache Aside Pattern 中遇到写请求是这样的：更新 DB，然后直接删除 cache 。")]),s._v(" "),t("p",[s._v("如果更新数据库成功，而删除缓存这一步失败的情况的话，简单说两个解决方案：")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("缓存失效时间变短（不推荐，治标不治本）")]),s._v("：我们让缓存数据的过期时间变短，这样的话缓存就会从数据库中加载数据。另外，这种解决办法对于先操作缓存后操作数据库的场景不适用。")]),s._v(" "),t("li",[t("strong",[s._v("增加 cache 更新重试机制（常用）")]),s._v("：如果 cache 服务当前不可用导致缓存删除失败的话，我们就隔一段时间进行重试，重试次数可以自己定。如果多次重试还是失败的话，我们可以把当前更新失败的 key 存入队列中，等缓存服务可用之后，再将缓存中对应的 key 删除即可。")])]),s._v(" "),t("p",[s._v("相关文章推荐："),t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzIyOTYxNDI5OA==&mid=2247487312&idx=1&sn=fa19566f5729d6598155b5c676eee62d&chksm=e8beb8e5dfc931f3e35655da9da0b61c79f2843101c130cf38996446975014f958a6481aacf1&scene=178&cur_album_id=1699766580538032128#rd",target:"_blank",rel:"noopener noreferrer"}},[s._v("缓存和数据库一致性问题，看这篇就够了 - 水滴与银弹open in new window"),t("OutboundLink")],1),s._v("。")])])}),[],!1,null,null,null);t.default=e.exports}}]);