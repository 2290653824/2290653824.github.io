(window.webpackJsonp=window.webpackJsonp||[]).push([[186],{510:function(t,a,r){"use strict";r.r(a);var e=r(4),s=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),a("p",[t._v("在适配器模式中可以定义一个包装类，包装不兼容接口的对象，这个包装类指的就是适配器(Adapter)，它所包装的对象就是适配者(Adaptee)，即被适配的类。\n适配器提供客户类需要的接口，适配器的实现就是把客户类的请求转化为对适配者的相应接口的调用。")]),t._v(" "),a("p",[t._v("适配器模式(Adapter Pattern) ：将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。")]),t._v(" "),a("h2",{attrs:{id:"结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构"}},[t._v("#")]),t._v(" 结构")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230102203321737.png",alt:"image-20230102203321737"}})]),t._v(" "),a("p",[t._v("Target：目标抽象类\nAdapter：适配器类\nAdaptee：适配者类\nClient：客户类")]),t._v(" "),a("p",[t._v("实际上分为对象适配器和类适配器")]),t._v(" "),a("h4",{attrs:{id:"对象适配器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象适配器"}},[t._v("#")]),t._v(" 对象适配器：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230102203656431.png",alt:"image-20230102203656431"}})]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("客户端")]),t._v(" （Client） 是包含当前程序业务逻辑的类。")]),t._v(" "),a("li",[a("strong",[t._v("客户端接口")]),t._v(" （Client Interface） 描述了其他类与客户端代码合作时必须遵循的协议。")]),t._v(" "),a("li",[a("strong",[t._v("服务")]),t._v(" （Service） 中有一些功能类 （通常来自第三方或遗留系统）。 客户端与其接口不兼容， 因此无法直接调用其功能。")]),t._v(" "),a("li",[a("strong",[t._v("适配器")]),t._v(" （Adapter） 是一个可以同时与客户端和服务交互的类： 它在实现客户端接口的同时封装了服务对象。 适配器接受客户端通过适配器接口发起的调用， 并将其转换为适用于被封装服务对象的调用。")]),t._v(" "),a("li",[t._v("客户端代码只需通过接口与适配器交互即可， 无需与具体的适配器类耦合。 因此， 你可以向程序中添加新类型的适配器而无需修改已有代码。 这在服务类的接口被更改或替换时很有用： 你无需修改客户端代码就可以创建新的适配器类。")])]),t._v(" "),a("h4",{attrs:{id:"类适配器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类适配器"}},[t._v("#")]),t._v(" 类适配器")]),t._v(" "),a("p",[t._v("这一实现使用了继承机制： 适配器同时继承两个对象的接口。 请注意， 这种方式仅能在支持多重继承的编程语言中实现， 例如 C++。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://refactoringguru.cn/images/patterns/diagrams/adapter/structure-class-adapter-indexed.png?id=250b5c485a7dfba7c16b89a9201538fb",alt:"适配器设计模式（类适配器）"}})]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("类适配器")]),t._v("不需要封装任何对象， 因为它同时继承了客户端和服务的行为。 适配功能在重写的方法中完成。 最后生成的适配器可替代已有的客户端类进行使用。")])]),t._v(" "),a("p",[t._v("优缺点;")]),t._v(" "),a("ul",[a("li",[a("em",[t._v("单一职责原则")]),t._v("你可以将接口或数据转换代码从程序主要业务逻辑中分离。")]),t._v(" "),a("li",[a("em",[t._v("开闭原则")]),t._v("。 只要客户端代码通过客户端接口与适配器进行交互， 你就能在不修改现有客户端代码的情况下在程序中添加新类型的适配器。")]),t._v(" "),a("li",[t._v("代码整体复杂度增加， 因为你需要新增一系列接口和类。 有时直接更改服务类使其与其他代码兼容会更简单。")])]),t._v(" "),a("p",[t._v("参考：")]),t._v(" "),a("p",[t._v("https://cloud.tencent.com/developer/article/1516403")]),t._v(" "),a("p",[t._v("https://www.jianshu.com/p/7dcd2c689729")])])}),[],!1,null,null,null);a.default=s.exports}}]);