(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{410:function(a,t,r){"use strict";r.r(t);var e=r(4),v=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("为什么会有这篇文章？\n**校招垃圾回收面试重灾区。**本人秋招面试过大大小小的公司，发现几乎所有公司在面试的时候，一旦涉及到JVM只是，CMS和G1是常问点，而且CMS问的尤其多。所以本文会对根据网上常见的资料做一个整合并根据自己面试过程中遇到的一些问题对CMS进行一些本质上的剖析。\n**知识沉淀。**网上很多资料可能知识介绍可能很浅，只介绍CMS流程和优缺点，但是没有讲CMS怎么做到低停顿时间，以及和parallel scavenge在吞吐量方面的对比。本文想对这点进行相应的解答。")]),a._v(" "),t("h2",{attrs:{id:"一-思维导图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-思维导图"}},[a._v("#")]),a._v(" 一. 思维导图")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/jpeg/29475739/1696659900503-e82a19e1-696e-4c04-87da-affc0e118fc0.jpeg",alt:""}})]),a._v(" "),t("h2",{attrs:{id:"二-parallel-scavenge"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-parallel-scavenge"}},[a._v("#")]),a._v(" 二. Parallel Scavenge")]),a._v(" "),t("h3",{attrs:{id:"什么是parallel-scavenge"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是parallel-scavenge"}},[a._v("#")]),a._v(" 什么是Parallel Scavenge")]),a._v(" "),t("p",[a._v("与 ParNew 一样是"),t("strong",[a._v("多线程收集器")]),a._v("。\n其它收集器关注点是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，它被称为“"),t("strong",[a._v("吞吐量优先")]),a._v("”收集器。这里的吞吐量指 CPU 用于运行用户代码的时间占总时间的比值。\n停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。"),t("strong",[a._v("而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务")]),a._v("。\n缩短停顿时间是以"),t("strong",[a._v("牺牲吞吐量和新生代空间来换取的: 新生代空间变小，垃圾回收变得频繁，导致吞吐量下降。")]),a._v("\n可以通过一个开关参数打开 GC 自适应的调节策略(GC Ergonomics)，就不需要手动指定新生代的大小(-Xmn)、Eden 和 Survivor 区的比例、晋升老年代对象年龄等细节参数了。虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。")]),a._v(" "),t("p",[a._v("老年带对应的事Parallel old\n"),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/29475739/1696658924512-834b9483-0ac0-4650-ac9f-433034e071cc.png#averageHue=%23f8f8f8&clientId=udaeeaf7d-39c5-4&from=paste&height=142&id=ub4e8f7d9&originHeight=235&originWidth=845&originalType=binary&ratio=2&rotation=0&showTitle=false&size=25351&status=done&style=none&taskId=ubafb8bdd-d935-4dba-a866-47669ed09d1&title=&width=511.5",alt:"image.png"}}),a._v("\n只需要记住关键字："),t("strong",[a._v("多线程、吞吐量优先、jdk 1.8 默认、可自适应调节")])]),a._v(" "),t("h3",{attrs:{id:"优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[a._v("#")]),a._v(" 优缺点")]),a._v(" "),t("p",[a._v("优点：高吞吐量\n缺点：")]),a._v(" "),t("ul",[t("li",[a._v("垃圾回收时停顿时间可能过长：因为优先考虑了吞吐量，所以停顿时间可能会过长")]),a._v(" "),t("li",[a._v("不适合交互式的任务：因为停顿时间长")]),a._v(" "),t("li",[a._v("可能占用的内存比较高（为了保证高吞吐量）：内存大，发生gc少，吞吐量高；但是因为内存大，单次gc复制算法时间复杂度高。")])]),a._v(" "),t("h2",{attrs:{id:"三-cms"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-cms"}},[a._v("#")]),a._v(" 三. CMS")]),a._v(" "),t("h3",{attrs:{id:"什么是cms"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是cms"}},[a._v("#")]),a._v(" 什么是CMS")]),a._v(" "),t("p",[a._v("CMS（Concurrent Mark Sweep）收集器是一种以获取"),t("strong",[a._v("最短回收停顿时间")]),a._v("为目标的收集器。它非常符合在注重用户体验的应用上使用。")]),a._v(" "),t("p",[a._v("CMS（Concurrent Mark Sweep）收集器是 HotSpot 虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。")]),a._v(" "),t("h3",{attrs:{id:"cms流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cms流程"}},[a._v("#")]),a._v(" CMS流程")]),a._v(" "),t("p",[a._v("需要注意的是老年代的收集采用的 **标记清除 **算法\n"),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/29475739/1696659437410-c6bc4041-6982-4ac2-b78d-4525b976333f.png#averageHue=%23e6e7e4&clientId=udaeeaf7d-39c5-4&from=paste&height=186&id=u467b012d&originHeight=264&originWidth=733&originalType=binary&ratio=2&rotation=0&showTitle=false&size=118741&status=done&style=none&taskId=u95056328-2c24-4070-b9a2-87aa9956760&title=&width=517.5",alt:"image.png"}})]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("初始标记：")]),a._v(" 暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ；")]),a._v(" "),t("li",[t("strong",[a._v("并发标记：")]),a._v(" 同时开启 GC 和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。")]),a._v(" "),t("li",[t("strong",[a._v("重新标记：")]),a._v(" 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短")]),a._v(" "),t("li",[t("strong",[a._v("并发清除：")]),a._v(" 开启用户线程，同时 GC 线程开始对未标记的区域做清扫。")])]),a._v(" "),t("h3",{attrs:{id:"优缺点-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优缺点-2"}},[a._v("#")]),a._v(" 优缺点")]),a._v(" "),t("p",[a._v("优点：低停顿时间、并发清除\n缺点：")]),a._v(" "),t("ul",[t("li",[a._v("吞吐量低: 低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。")]),a._v(" "),t("li",[a._v("无法处理浮动垃圾，可能出现 Concurrent Mode Failure。浮动垃圾是指并发清除阶段由于用户线程继续运行而产生的垃圾，这部分垃圾只能到下一次 GC 时才能进行回收。由于浮动垃圾的存在，因此需要预留出一部分内存，意味着 CMS 收集不能像其它收集器那样等待老年代快满的时候再回收。如果预留的内存不够存放浮动垃圾，就会出现 Concurrent Mode Failure，这时虚拟机将临时启用 Serial Old 来替代 CMS。")]),a._v(" "),t("li",[a._v("标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 Full GC。")])]),a._v(" "),t("h3",{attrs:{id:"为什么采用标记清除算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么采用标记清除算法"}},[a._v("#")]),a._v(" 为什么采用标记清除算法")]),a._v(" "),t("p",[a._v("明明其他大多数垃圾回收器老年代都采用标记整理算法，为什么CMS要另辟蹊径采用标记清除？\n标记清除速度快，但是会产生内存碎片\n标记整理可以解决内存碎片问题，但是缺点就是整理移动的过程比较耗费时间。\n在标记整理算法中，首先进行标记阶段，标记出所有存活的对象，然后进行整理阶段，将存活的对象向一端移动，然后释放整理后的空间。这个过程中，需要移动对象，可能会导致大量的内存复制和对象移动操作，对于老年代这样的大对象空间，移动对象的代价会相对较高，可能引起较长的暂停时间。\n但恰恰我们的CMS是一个低停顿的垃圾回收器，所以选择了标记清除算法，容忍了内存碎片的问题。")]),a._v(" "),t("h3",{attrs:{id:"什么是concurrent-mode-failure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是concurrent-mode-failure"}},[a._v("#")]),a._v(" 什么是Concurrent Mode Failure")]),a._v(" "),t("ul",[t("li",[a._v("浮动垃圾：")])]),a._v(" "),t("p",[a._v("由于CMS并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS无法在当次收集中处理掉它们，只好留待下一次GC时再清理掉。这一部分垃圾就称为“浮动垃圾”。")]),a._v(" "),t("p",[a._v("CMS收集器无法处理浮动垃圾（Floating Garbage），可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。\n（1）如果对象提升到年老代的速度太快，而CMS收集器不能保持足够多的可用空间时，就会导致年老代的运行空间不足；\n（2）当年老代的碎片化达到某种程度，使得没有足够空间容纳从新生代提升上来的对象时，也会发生并发模式失败。\n当发生并发模式失败时，年老代将进行垃圾收集以释放可用空间，同时也会整理压缩以消除碎片，这个操作需要停止所有的java应用线程，并且需要执行相当长时间。")]),a._v(" "),t("p",[a._v("如果发生了Concurrent Mode Failure ，就会垃圾回收器退化，由Serial old来进行垃圾回收，此时产生全局停顿，耗时较高，应避免发生。")]),a._v(" "),t("h2",{attrs:{id:"四-吞吐量与停顿时间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-吞吐量与停顿时间"}},[a._v("#")]),a._v(" 四. 吞吐量与停顿时间")]),a._v(" "),t("p",[a._v("JVM的吞吐量是指在一定时间内，JVM能够执行的任务数量。\nJVM的停顿时间则是指在执行任务的过程中，JVM需要停止执行任务来进行垃圾回收等操作所花费的时间。\n"),t("strong",[a._v("JVM的吞吐量和停顿时间确实是存在一定的互斥关系的。")]),a._v("\n所以想要其中一个特性就需要舍弃到另外一个特性")]),a._v(" "),t("h3",{attrs:{id:"影响因素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#影响因素"}},[a._v("#")]),a._v(" 影响因素")]),a._v(" "),t("p",[a._v("以下是影响CMS吞吐量和停顿时间的主要因素：\n"),t("strong",[a._v("堆大小")]),a._v("：较大的堆可以容纳更多的对象，减少垃圾回收的频率，从而提高吞吐量。但是，较大的堆也意味着更长的垃圾回收时间，可能导致较长的停顿时间。\n"),t("strong",[a._v("并发线程数")]),a._v("：CMS使用并发线程来执行标记和清除阶段。增加并发线程数可以提高并发执行的时间，减少停顿时间。但是，过多的并发线程可能会导致线程竞争和额外的系统开销，可能对吞吐量产生负面影响。\n"),t("strong",[a._v("触发垃圾回收的阈值")]),a._v("：CMS会根据触发垃圾回收的阈值来决定执行垃圾回收的时机。较低的阈值可能导致频繁的垃圾回收，增加停顿时间；而较高的阈值可能延迟垃圾回收，增加吞吐量但可能导致较长的停顿时间。\n"),t("strong",[a._v("并发标记时间")]),a._v("：并发标记阶段是CMS的核心，它需要在应用程序运行的同时进行垃圾对象的标记。较长的并发标记时间会增加停顿时间，而较短的并发标记时间会增加吞吐量。因此，并发标记的效率对吞吐量和停顿时间都有影响。\n"),t("strong",[a._v("应用程序的行为")]),a._v("：应用程序的内存分配模式、对象的生命周期等因素也会影响CMS的性能。如果应用程序产生了大量的垃圾对象或者有过多的存活对象，可能会增加垃圾回收的负担，导致较长的停顿时间。")]),a._v(" "),t("h3",{attrs:{id:"如何平衡两者"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何平衡两者"}},[a._v("#")]),a._v(" 如何平衡两者")]),a._v(" "),t("p",[a._v("一般来说，为了提高JVM的吞吐量，我们可以采取一些措施，比如增加并发线程数、调整垃圾回收策略等。但这些措施可能会增加JVM的停顿时间，因为在进行并发线程操作和垃圾回收操作时，JVM需要停止执行任务。\n相反，为了减少JVM的停顿时间，我们可以采取一些措施，比如选择更加智能的垃圾回收策略、调整垃圾回收频率等。但这些措施可能会降低JVM的吞吐量，因为在进行智能垃圾回收和调整回收频率时，JVM需要占用更多的计算资源，导致无法执行更多的任务。\n因此，在实际应用中，我们需要根据具体情况综合考虑吞吐量和停顿时间之间的关系，选择合适的JVM配置和垃圾回收策略。同时，我们也可以采用一些优化技巧，比如使用并发垃圾回收、调整堆大小等，来平衡吞吐量和停顿时间的关系。")]),a._v(" "),t("h2",{attrs:{id:"五-cms在停顿时间上做了哪些优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五-cms在停顿时间上做了哪些优化"}},[a._v("#")]),a._v(" 五. CMS在停顿时间上做了哪些优化")]),a._v(" "),t("ol",[t("li",[a._v("与用户线程并发")]),a._v(" "),t("li",[a._v("采用标记清除算法")]),a._v(" "),t("li",[a._v("由于最耗费时间的并发标记与并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的")])]),a._v(" "),t("h2",{attrs:{id:"六-常见的cms参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六-常见的cms参数"}},[a._v("#")]),a._v(" 六. 常见的CMS参数")]),a._v(" "),t("p",[a._v("①. -XX:+UseConcMarkSweepGC: 手动指定使用CMS收集器执行内存回收任务\n(开启该参数后会自动将一XX: +UseParNewGC打开。即: ParNew (Young区用) +CMS (0ld区用) +Serial 0ld的组合)\n②. -XX:CMSlnitiatingOccupanyFraction:设置堆内存使用率的阈值,一旦达到该阈值,便开始进行回收")]),a._v(" "),t("ul",[t("li",[a._v("JDK5及以前版本的默认值为68,即当老年代的空间使用率达到68%时,会执行一次CMS 回收。JDK6及以上版本默认值为92%")]),a._v(" "),t("li",[a._v("如果"),t("strong",[a._v("内存增长缓慢,则可以设置一个稍大的值")]),a._v(",大的阈值可以有效降低CMS的触发频率,减少老年代回收的次数可以较为明显地改善应用程序性能。反之,如果应用程序内存使用率增长很快,则应该降低这个阈值,以"),t("strong",[a._v("避免频繁触发老年代串行收集器")]),a._v("。因此通过该选项便可以有效降低Full GC的执行次数")])]),a._v(" "),t("p",[a._v("③. -XX:+UseCMSCompactAtFullCollection:用于指定在执行完Full GC后对内存空间进行压缩整理,以此避免内存碎片的产生。不过由于内存压缩整理过程无法并发执行,所带来的问题就是停顿时间变得更长了\n④. -XX:CMSFullGCsBeforeCompaction:设置在执行多少次Full GC后对内存空间进行压缩整理\n⑤. -XX:ParallelCMSThreads:设置CMS的线程数量")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("CMS 默认启动的线程数是(Parallel****GCThreads+3)/4")])]),a._v(" "),t("li",[a._v("ParallelGCThreads 是年轻代并行收集器的线程数。当CPU 资源比较紧张时,受到CMS收集器线程的影响,应用程序的性能在垃圾回收阶段可能会非常糟糕)")])]),a._v(" "),t("h2",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")])]),a._v(" "),t("h2",{attrs:{id:"七-参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七-参考"}},[a._v("#")]),a._v(" 七.参考：")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://pdai.tech/md/java/jvm/java-jvm-gc.html#_6-cms-%E6%94%B6%E9%9B%86%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[a._v("java全栈知识体系"),t("OutboundLink")],1),a._v(" "),t("a",{attrs:{href:"https://javaguide.cn/java/jvm/jvm-garbage-collection.html#parallel-scavenge-%E6%94%B6%E9%9B%86%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[a._v("javaguide"),t("OutboundLink")],1),a._v(" "),t("a",{attrs:{href:"https://segmentfault.com/a/1190000004707217",target:"_blank",rel:"noopener noreferrer"}},[a._v("CMS为什么采用标记-清除算法"),t("OutboundLink")],1),a._v(" "),t("a",{attrs:{href:"https://juejin.cn/post/7010033469728227364",target:"_blank",rel:"noopener noreferrer"}},[a._v("CMS低延迟垃圾收集器详解"),t("OutboundLink")],1),a._v(" "),t("a",{attrs:{href:"https://juejin.cn/s/jvm%E5%90%9E%E5%90%90%E9%87%8F%E5%92%8C%E5%81%9C%E9%A1%BF%E6%97%B6%E9%97%B4%E6%98%AF%E4%BA%92%E6%96%A5%E7%9A%84",target:"_blank",rel:"noopener noreferrer"}},[a._v("jvm吞吐量和停顿时间是互斥的"),t("OutboundLink")],1)]),a._v(" "),t("p",[a._v("https://juejin.cn/post/7023935314703941663")])])}),[],!1,null,null,null);t.default=v.exports}}]);