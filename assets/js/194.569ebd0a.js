(window.webpackJsonp=window.webpackJsonp||[]).push([[194],{515:function(t,a,s){"use strict";s.r(a);var i=s(4),n=Object(i.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-泛化-generalization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-泛化-generalization"}},[t._v("#")]),t._v(" 1.  泛化 Generalization")]),t._v(" "),a("ul",[a("li",[t._v("继承关系 extends")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230928172702758.png",alt:"image-20230928172702758"}})]),t._v(" "),a("h2",{attrs:{id:"_2-实现-realization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现-realization"}},[t._v("#")]),t._v(" 2. 实现 Realization")]),t._v(" "),a("ul",[a("li",[t._v("实现 implements")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230928172736892.png",alt:"image-20230928172736892"}})]),t._v(" "),a("h2",{attrs:{id:"_3-聚合-aggregation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-聚合-aggregation"}},[t._v("#")]),t._v(" 3. 聚合 Aggregation")]),t._v(" "),a("p",[t._v("​\t表示整体由部分组成，但是整体和部分不是强依赖的，整体不存在了部分还是会存在。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230928172844898.png",alt:"image-20230928172844898"}})]),t._v(" "),a("h2",{attrs:{id:"_4-组合-composition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-组合-composition"}},[t._v("#")]),t._v(" 4. 组合 Composition")]),t._v(" "),a("p",[t._v("​\t和聚合不同，组合中整体和部分是强依赖的，整体不存在了部分也不存在了。比如公司和部门，公司没了部门就不存在了。但是公司和员工就属于聚合关系了，因为公司没了员工还在。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230928173037205.png",alt:"image-20230928173037205"}})]),t._v(" "),a("h2",{attrs:{id:"_5-关联-association"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-关联-association"}},[t._v("#")]),t._v(" 5. 关联  Association")]),t._v(" "),a("p",[t._v("​\t表示不同类对象之间有关联，这是一种静态关系，与运行过程的状态无关，在最开始就可以确定。因此也可以用 1 对 1、多对 1、多对多这种关联关系来表示。比如学生和学校就是一种关联关系，一个学校可以有很多学生，但是一个学生只属于一个学校，因此这是一种多对一的关系，在运行开始之前就可以确定。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230928173156224.png",alt:"image-20230928173156224"}})]),t._v(" "),a("h2",{attrs:{id:"_6-依赖-dependency"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-依赖-dependency"}},[t._v("#")]),t._v(" 6. 依赖 Dependency")]),t._v(" "),a("p",[t._v("和关联关系不同的是，依赖关系是在运行过程中起作用的。A 类和 B 类是依赖关系主要有三种形式:")]),t._v(" "),a("ul",[a("li",[t._v("A 类是 B 类中的(某中方法的)局部变量；")]),t._v(" "),a("li",[t._v("A 类是 B 类方法当中的一个参数；")]),t._v(" "),a("li",[t._v("A 类向 B 类发送消息，从而影响 B 类发生变化；")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230928173249444.png",alt:"image-20230928173249444"}})])])}),[],!1,null,null,null);a.default=n.exports}}]);