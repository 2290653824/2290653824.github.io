(window.webpackJsonp=window.webpackJsonp||[]).push([[309],{632:function(s,a,t){"use strict";t.r(a);var v=t(4),e=Object(v.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"一-需求开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-需求开发"}},[s._v("#")]),s._v(" 一. 需求开发")]),s._v(" "),a("h4",{attrs:{id:"描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[s._v("#")]),s._v(" 描述")]),s._v(" "),a("p",[s._v("后台管理系统中需要有一个开关控制数字人是否可见。当然，这个是通过后台管理系统来控制，他会返回数据库的所有数据，但是对于服务端来说，会先把不可见的给排除掉，然后在进行分页展示。")]),s._v(" "),a("h4",{attrs:{id:"疑问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#疑问"}},[s._v("#")]),s._v(" 疑问")]),s._v(" "),a("p",[s._v("疑问：新增字段，isVisiable  false表示隐藏 true表示可见。那数据库没有该字段的映射到go这边就是false。那我还需要去数据库将以前的老数据重新刷为true吗？")]),s._v(" "),a("p",[s._v("答：不用，后台管理系统是可以看到所有数据的，当数据为false时，后台管理系统可以手动改为true，所以我们还需要新增一个接口用于更改可见状态的接口【不好说，一切要等admin完成后实现】")]),s._v(" "),a("p",[s._v("疑问: 后台管理系统插入新的数字人后，默认可见吗？")]),s._v(" "),a("p",[s._v("答：不是的，创建新的数字人，由前端传递该字段的实际值，必传项。")]),s._v(" "),a("p",[s._v("疑问：后台管理中数字人list接口好像默认返回的是所有数据，所以不需要更改？")]),s._v(" "),a("p",[s._v("答：是的，不用太大的修改，返回对应的新增字段就可以了。")]),s._v(" "),a("p",[s._v("疑惑：后台管理中数字人更新接口只需要更改传递的req参数新增字段即可，不需要新增加新的接口吧")]),s._v(" "),a("p",[s._v("答：是的，但是必须约定好，前段这个字段是必须传的。")]),s._v(" "),a("h4",{attrs:{id:"测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[s._v("#")]),s._v(" 测试")]),s._v(" "),a("p",[s._v("后台管理：")]),s._v(" "),a("ol",[a("li",[s._v("列表查看/api/dp/list")])]),s._v(" "),a("p",[s._v("返回所有数据，但是所有数据中新增返回isvisible字段")]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("插入数字人/api/dp/add")])]),s._v(" "),a("p",[s._v("前端约定好，必须传入可见性的值，否则会出现问题。")]),s._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[s._v("数字人更新/api/dp/update")])]),s._v(" "),a("p",[s._v("前端约定好，必须传入可见性的值，否则会出现问题")]),s._v(" "),a("p",[s._v("待admin上线成功后进行测试。")]),s._v(" "),a("p",[s._v("服务端：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("列表查看/v1/dp/list  【测试成功】")]),s._v(" "),a("p",[s._v("【apps/dp_server/internal/service/svc_sensetime.go:26】")]),s._v(" "),a("p",[s._v("是否过滤掉不可见的数据，并且返回对应的字段 (需要给mongo st_dp_app的所有数据加上visible加上数据才行，否则为null的数据查不出来。建议给mongo这些字段加上非空索引) 。经查看，没有非空索引，但是有判断数据是否为null的方法https://www.jianshu.com/p/474424c49801")])])]),s._v(" "),a("blockquote",[a("p",[s._v("需要判断是 刷mongo字段还是在代码中新增or isvisible 是否为null的逻辑 （目前打算采用刷mongo的方法）【强行规定，isvisible字段必须非空】")])]),s._v(" "),a("h2",{attrs:{id:"二-新学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-新学习"}},[s._v("#")]),s._v(" 二.新学习：")]),s._v(" "),a("h4",{attrs:{id:"什么是32cpu"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是32cpu"}},[s._v("#")]),s._v(" 什么是32cpu")]),s._v(" "),a("ol",[a("li",[s._v("32位和64位指的是cpu一次能处理的数据的长度（也就是寄存器的位数），源头的定义和数据总线和地址总线都没有关系2. 如果数据总线的长度小于字长的话，那么会浪费cpu的处理能力，大于字长的话，传动过来的数据cpu一次处理不完，所以一般数据总线的长度等于字长3. 指针也是数据，所以cpu一次处理的数据长度和指针长度最好是相等的，而指针的长度和地址总线又是对应的，所以地址总线的长度一般情况也会等于字长综上所述：字长==数据总线长度==地址总线长度（但是实际中地址总线很多高位用不到，所以默认置0，省去了一些地址总线，总的长度是小于64的，只是64位的机器理论上可寻址的范围在2的64次方B)")])]),s._v(" "),a("p",[s._v("那么寄存器的位数由什么决定呢？")]),s._v(" "),a("blockquote",[a("p",[s._v("CPU 的寄存器位数是由其架构设计和硬件实现决定的。寄存器的位数指的是寄存器可以容纳的二进制位数。在计算机体系结构中，寄存器位数通常与 CPU 的数据总线宽度相关，同时也影响着 CPU 的整数运算能力和内存寻址范围。")]),s._v(" "),a("p",[s._v("具体来说，寄存器位数决定了以下几个方面：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("数据总线宽度：")]),s._v(" CPU 的寄存器位数通常对应于其数据总线宽度。例如，一个 32 位的 CPU 拥有 32 位的寄存器和 32 位的数据总线。这意味着每个时钟周期内可以传输 32 位的数据。")]),s._v(" "),a("li",[a("strong",[s._v("整数运算能力：")]),s._v(" 寄存器位数也影响 CPU 的整数运算能力。例如，一个 32 位的 CPU 可以在一个时钟周期内执行 32 位的整数运算。")]),s._v(" "),a("li",[a("strong",[s._v("内存寻址范围：")]),s._v(" 寄存器位数还与 CPU 可以直接寻址的内存范围有关。例如，32 位的 CPU 可以寻址的内存范围较小，因为 32 位的地址空间可以表示的最大值有限。这会影响系统的可用内存容量。")]),s._v(" "),a("li",[a("strong",[s._v("指令集架构：")]),s._v(" 寄存器位数也会影响 CPU 的指令集架构，特别是在处理大整数或浮点数时。某些指令可能需要更大的寄存器来容纳操作数。")])]),s._v(" "),a("p",[s._v("需要注意的是，寄存器位数不仅仅取决于 CPU 的设计，还与制造工艺、性能需求、成本等因素相关。不同的 CPU 架构可能会选择不同的寄存器位数，以平衡性能和其他因素。")]),s._v(" "),a("p",[s._v("在历史发展中，计算机的寄存器位数不断增加，以提高性能和处理更大数据集的能力。从 8 位、16 位到 32 位、64 位等寄存器位数的 CPU 都有不同的应用和优势。")])]),s._v(" "),a("p",[s._v("更加具体的连接可以看 https://www.cnblogs.com/cdaniu/p/15154961.html")]),s._v(" "),a("h4",{attrs:{id:"什么是字长"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是字长"}},[s._v("#")]),s._v(" 什么是字长")]),s._v(" "),a("p",[s._v("这个字长从编程语言的角度理解就没意义了。字长要从汇编语言的角度理解，就是指令集里面的运算和内存操作时操作数的长度。比如你写一条load a, reg1，那么a这个操作数的长度就是字长。32位机的字长最大是32bit，64位机的字长最大是64bit。整型长整型浮点型之类的是编译器关心的问题，不一定直接反应在汇编指令上。")]),s._v(" "),a("h4",{attrs:{id:"学习go中flag使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#学习go中flag使用"}},[s._v("#")]),s._v(" 学习go中flag使用")]),s._v(" "),a("h4",{attrs:{id:"一个go文件中的执行顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个go文件中的执行顺序"}},[s._v("#")]),s._v(" 一个go文件中的执行顺序")]),s._v(" "),a("p",[s._v("在 Go 文件中，"),a("code",[s._v("init")]),s._v(" 函数、全局变量的初始化以及 "),a("code",[s._v("main")]),s._v(" 函数的执行顺序如下：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("全局变量初始化：")]),s._v(" 全局变量的初始化是在程序启动时完成的。它们按照声明的顺序进行初始化。如果一个全局变量依赖于另一个全局变量，Go 会确保它们以正确的顺序初始化。全局变量的初始化发生在任何函数被调用之前。")]),s._v(" "),a("li",[a("strong",[a("code",[s._v("init")]),s._v(" 函数：")]),s._v(" 如果一个文件中包含了 "),a("code",[s._v("init")]),s._v(" 函数，Go 在程序启动时会首先执行这些 "),a("code",[s._v("init")]),s._v(" 函数。"),a("code",[s._v("init")]),s._v(" 函数可以用来执行一些初始化操作，但是注意它们不能被显式地调用。当你导入一个包时，其包含的所有 "),a("code",[s._v("init")]),s._v(" 函数都会被调用。不同包中的 "),a("code",[s._v("init")]),s._v(" 函数的调用顺序是未定义的，所以不要依赖不同包之间的 "),a("code",[s._v("init")]),s._v(" 函数的执行顺序。")]),s._v(" "),a("li",[a("strong",[a("code",[s._v("main")]),s._v(" 函数：")]),s._v(" "),a("code",[s._v("main")]),s._v(" 函数是 Go 程序的入口点，它在所有的全局变量初始化和"),a("code",[s._v("init")]),s._v("函数调用之后执行。"),a("code",[s._v("main")]),s._v(" 函数是程序的主要入口，其中的代码会在程序运行时被执行。")])]),s._v(" "),a("p",[s._v("总结起来，初始化的顺序是：全局变量初始化 -> "),a("code",[s._v("init")]),s._v(" 函数调用 -> "),a("code",[s._v("main")]),s._v(" 函数执行。")]),s._v(" "),a("p",[s._v("以下是一个示例，展示了这些概念的执行顺序：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('package main\n\nimport "fmt"\n\n// 全局变量\nvar globalVar = "Global Variable"\n\n// init 函数\nfunc init() {\n\tfmt.Println("init function")\n}\n\n// 主函数\nfunc main() {\n\tfmt.Println("main function")\n\tfmt.Println("Global Variable:", globalVar)\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("运行这个程序将会得到如下输出：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("init function\nmain function\nGlobal Variable: Global Variable\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("需要注意的是，这里的 "),a("code",[s._v("init")]),s._v(" 函数只有在程序启动时才会执行一次。如果有多个文件含有 "),a("code",[s._v("init")]),s._v(" 函数，它们会按照导入的顺序执行。全局变量初始化和 "),a("code",[s._v("init")]),s._v(" 函数的调用都在 "),a("code",[s._v("main")]),s._v(" 函数之前。")]),s._v(" "),a("h4",{attrs:{id:"sso和jwt区别-无状态和有状态区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sso和jwt区别-无状态和有状态区别"}},[s._v("#")]),s._v(" sso和jwt区别，无状态和有状态区别")]),s._v(" "),a("p",[s._v("JWT（JSON Web Token）和SSO（Single Sign-On）是两个在身份验证和授权领域常见的概念，它们有一些相似之处，但也有明显的区别。")]),s._v(" "),a("p",[a("strong",[s._v("JWT (JSON Web Token):")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("定义：")]),s._v(" JWT 是一种用于在不同组件、服务或应用程序之间安全传输信息的开放标准（RFC 7519）。它通常用于身份验证和授权，以及在不同的系统之间传递声明。")]),s._v(" "),a("li",[a("strong",[s._v("结构：")]),s._v(" JWT 由三部分组成，通过点号（.）分隔：Header、Payload 和 Signature。Header 包含加密算法和令牌类型，Payload 包含声明和数据，Signature 是使用私钥生成的签名，用于验证令牌的完整性和来源。")]),s._v(" "),a("li",[a("strong",[s._v("用途：")]),s._v(" JWT 可用于实现无状态的身份验证和授权，因为令牌本身包含足够的信息。在前后端分离的应用中，常用于用户身份验证和授权，通过在每个请求的 Authorization 头部中传递令牌来识别用户。")])]),s._v(" "),a("p",[a("strong",[s._v("SSO (Single Sign-On):")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("定义：")]),s._v(" SSO 是一种身份验证和授权机制，允许用户在登录到一个系统后，无需再次登录即可访问其他相互信任的系统。用户只需要一次登录就可以在多个系统中进行身份验证，提高了用户体验并减少了密码管理负担。")]),s._v(" "),a("li",[a("strong",[s._v("工作原理：")]),s._v(" SSO 通过在用户登录时生成一个主要的身份验证令牌，然后在用户访问其他系统时将这个令牌传递给这些系统。这些系统使用令牌来验证用户身份，而不需要用户再次输入凭据。")]),s._v(" "),a("li",[a("strong",[s._v("用途：")]),s._v(" SSO 适用于企业内部、多个关联的应用程序或服务之间，以及跨不同域的网站之间。它可以提供更方便的用户体验，同时减少了密码遗忘、输入重复凭据的问题。")])]),s._v(" "),a("p",[a("strong",[s._v("区别：")])]),s._v(" "),a("ul",[a("li",[s._v("JWT 是一种令牌（Token）格式，用于在应用程序之间传递信息，通常包含身份验证和授权信息。SSO 是一种身份验证和授权机制，可以通过 JWT 实现，但它还包括了用户在多个系统之间单一登录的功能。")]),s._v(" "),a("li",[s._v("JWT 可以用于实现无状态的身份验证，而 SSO 更强调用户在多个系统之间的单一登录体验。")]),s._v(" "),a("li",[s._v("SSO 涉及用户在多个系统之间的集中身份管理，而 JWT 通常只涉及单个系统内的身份验证和授权。")]),s._v(" "),a("li",[s._v("SSO 可以基于 JWT 实现，将 JWT 用作 SSO 的令牌格式之一。")])]),s._v(" "),a("p",[s._v("综上所述，JWT 是一种用于在应用程序之间传递信息的令牌格式，而 SSO 是一种身份验证和授权机制，可以通过 JWT 实现。")]),s._v(" "),a("p",[s._v("无状态的身份验证和授权是指在验证用户身份和授权用户访问资源时，系统不依赖于在服务器端保存用户的状态信息。相反，所有必要的信息都包含在每个请求中，通常是在令牌（如 JWT）中，服务器可以根据这些信息进行验证和授权。有状态和无状态的区别在于系统是否在服务器端保存用户状态。")]),s._v(" "),a("p",[a("strong",[s._v("无状态 (Stateless)：")])]),s._v(" "),a("ul",[a("li",[s._v("在无状态的身份验证和授权中，服务器不会在本地保存用户的会话状态或会话信息。")]),s._v(" "),a("li",[s._v("用户在登录成功后，服务器会生成一个令牌（例如 JWT）并发送给客户端。以后的每个请求都会携带这个令牌作为身份验证凭据。")]),s._v(" "),a("li",[s._v("服务器使用令牌中的信息进行身份验证和授权，而不需要在服务器上存储任何有关用户状态的信息。")]),s._v(" "),a("li",[s._v("无状态的方式适合构建可扩展、易于维护的系统，因为服务器无需保持用户状态，而且每个请求都是相互独立的。")])]),s._v(" "),a("p",[a("strong",[s._v("有状态 (Stateful)：")])]),s._v(" "),a("ul",[a("li",[s._v("在有状态的身份验证和授权中，服务器会在服务器端保存用户的会话状态，通常通过在服务器上存储会话信息或使用会话标识符（Session ID）来实现。")]),s._v(" "),a("li",[s._v("用户在登录成功后，服务器会为用户创建一个会话，并将会话 ID 存储在服务器端。以后的每个请求都会包含这个会话 ID，服务器通过这个 ID 来识别用户和用户的状态。")]),s._v(" "),a("li",[s._v("有状态的方式可能会引入一些挑战，如负载均衡和容错性的问题，因为用户状态需要在服务器之间共享。")])]),s._v(" "),a("p",[a("strong",[s._v("区别：")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("数据存储：")]),s._v(" 无状态系统不需要在服务器端存储用户的会话状态，而有状态系统需要在服务器端保存用户状态信息。")]),s._v(" "),a("li",[a("strong",[s._v("可伸缩性：")]),s._v(" 无状态系统通常更易于水平扩展，因为每个请求都是独立的，服务器之间无需共享状态。而有状态系统在扩展时需要考虑如何共享状态信息。")]),s._v(" "),a("li",[a("strong",[s._v("复杂性：")]),s._v(" 无状态系统在实现上相对简单，因为不需要处理会话状态。有状态系统需要维护会话状态，可能会增加一些复杂性。")]),s._v(" "),a("li",[a("strong",[s._v("适用场景：")]),s._v(" 无状态适用于构建可伸缩的、分布式的系统。有状态适用于需要保持会话状态、多步骤交互的应用，如购物车、在线支付等。")])]),s._v(" "),a("p",[s._v("综上所述，无状态的身份验证和授权适用于许多现代应用程序，特别是分布式和微服务架构中。这种方法可以帮助提高可扩展性和系统的灵活性。")]),s._v(" "),a("h4",{attrs:{id:"学习公司的sso"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#学习公司的sso"}},[s._v("#")]),s._v(" 学习公司的sso")]),s._v(" "),a("p",[s._v("首先，数字人这个项目作为服务提供方sp来看的。我在上家公司主要是负责的sso的idp这方。")]),s._v(" "),a("p",[s._v("站在sp这边来看，这个服务甚至没有什么登录的账户密码的接口，而是前端在选择登录时会会跳转到sso登录界面，登录成功后会回调sp这边的地址，并传递token。")]),s._v(" "),a("p",[s._v("所以站在sp方，仿佛都不用管这个登录接口，只需要向sso方提供一个回调地址用于传递token就行了。")]),s._v(" "),a("p",[s._v("当然还有个登出的服务：登出的服务也是直接调用sso的地址就可以了")]),s._v(" "),a("p",[s._v("有机会可以研究各个验证授权方式的区别和代码：")]),s._v(" "),a("blockquote",[a("p",[s._v("在后端实现验证和授权时，有多种方案和方法可以选择，具体的选择取决于你的应用程序需求和架构。以下是一些常见的后端验证和授权方案：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("基于会话和Cookie的验证：")]),s._v(" 使用会话和 Cookie 来管理用户的身份验证状态。用户登录后，服务器会创建一个会话，并将会话 ID 存储在 Cookie 中。在以后的请求中，服务器可以通过会话 ID 验证用户身份。这种方法可以实现有状态的身份验证。")]),s._v(" "),a("li",[a("strong",[s._v("基于令牌的验证和授权：")]),s._v(" 使用令牌（Token）来进行验证和授权，常见的是使用 JWT（JSON Web Token）。用户在登录后，服务器生成一个令牌，将其发送给客户端，以后的请求中客户端会携带这个令牌来验证身份。这种方法可以实现无状态的身份验证和授权。")]),s._v(" "),a("li",[a("strong",[s._v("OAuth 2.0 和 OpenID Connect：")]),s._v(" OAuth 2.0 是一种授权框架，允许第三方应用程序获得有限的访问权限。OpenID Connect 是在 OAuth 2.0 基础上构建的身份验证协议，用于用户的身份验证和授权。这种方法适用于实现跨应用程序的单一登录和授权。")]),s._v(" "),a("li",[a("strong",[s._v("基于角色和权限的授权：")]),s._v(" 将用户分配到不同的角色，每个角色有不同的权限。在访问资源时，服务器会检查用户的角色和权限来决定是否授权访问。")]),s._v(" "),a("li",[a("strong",[s._v("CAS（Central Authentication Service）：")]),s._v(" CAS 是一种单一登录协议，通过一个中央服务器来处理用户的身份验证和授权。用户在登录后，其他应用程序可以向 CAS 服务器验证用户的身份。")]),s._v(" "),a("li",[a("strong",[s._v("自定义认证和授权逻辑：")]),s._v(" 在一些特殊情况下，可能需要实现自定义的认证和授权逻辑，根据应用程序的需求来定制验证和授权流程。")])]),s._v(" "),a("p",[s._v("无论你选择哪种方案，安全性都是最重要的考虑因素。确保实施正确的验证和授权流程，对敏感数据进行适当的保护，以及进行足够的测试来验证你的方案是否满足你的应用程序需求和安全标准。")])]),s._v(" "),a("h4",{attrs:{id:"什么是跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是跨域"}},[s._v("#")]),s._v(" 什么是跨域")]),s._v(" "),a("p",[s._v("以前知道这回事，现在想仔细知道是什么")]),s._v(" "),a("blockquote",[a("p",[s._v("跨域（Cross-Origin）指的是在 Web 应用中，一个网页的 JavaScript 代码试图去访问另一个域名下的资源，而这个资源的域名与当前页面的域名不一致。跨域问题是出于安全考虑而产生的，浏览器出于同源策略【协议相同; 域名相同; 端口】的限制，阻止了跨域请求，以避免恶意网站获取到其他域名下的敏感信息。")]),s._v(" "),a("p",[s._v("Java 后端在解决跨域问题时，通常需要配置相关的 CORS（Cross-Origin Resource Sharing）策略。CORS 是一种用于允许跨域请求的机制，可以在服务器端设置来控制允许哪些域名的请求访问资源。")]),s._v(" "),a("p",[s._v("以下是一些在 Java 后端解决跨域问题的方法：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("使用 Servlet 过滤器：")]),s._v(" 创建一个自定义的 Servlet 过滤器，在其中添加 CORS 相关的响应头，允许指定的域名访问资源。例如：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class CorsFilter implements Filter {\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n            throws IOException, ServletException {\n        HttpServletResponse httpResponse = (HttpServletResponse) response;\n        httpResponse.setHeader("Access-Control-Allow-Origin", "http://allowed-domain.com");\n        httpResponse.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE");\n        // 其他 CORS 相关设置\n        chain.doFilter(request, response);\n    }\n    // 其他方法\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("ol",[a("li",[a("strong",[s._v("使用 Spring 框架的 @CrossOrigin 注解：")]),s._v(" 如果你使用 Spring 框架，可以在控制器方法上使用 "),a("code",[s._v("@CrossOrigin")]),s._v(" 注解来设置允许的域名：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('javaCopy code\n@CrossOrigin(origins = "http://allowed-domain.com")\n@RestController\npublic class MyController {\n    // 控制器方法\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("ol",[a("li",[a("strong",[s._v("配置过滤器或拦截器：")]),s._v(" 使用 Spring 框架的过滤器或拦截器，在请求被处理之前，设置响应头来允许跨域访问。")])]),s._v(" "),a("p",[s._v("无论使用哪种方法，都需要谨慎设置允许的域名，以确保安全性。你可以根据你的应用需求，选择最适合的方式来解决跨域问题。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230821175452308.png",alt:"image-20230821175452308"}})]),s._v(" "),a("p",[s._v("这5个key主要表示的什么")]),s._v(" "),a("p",[s._v("可以参考:https://blog.csdn.net/liao0801_123/article/details/103459241?ydreferer=aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS5oay8%3D")]),s._v(" "),a("p",[s._v("比较全")]),s._v(" "),a("h4",{attrs:{id:"linux设置别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux设置别名"}},[s._v("#")]),s._v(" linux设置别名")]),s._v(" "),a("blockquote",[a("p",[s._v("在 Linux 系统中，你可以通过配置别名（Alias）来简化一些常用的命令，以便更快捷地执行它们。别名允许你定义一个短的名称，当你输入这个名称时，实际上执行的是一个长的命令序列。以下是在 Linux 中设置别名的方法：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("临时别名：")]),s._v(" 你可以在命令行中使用 "),a("code",[s._v("alias")]),s._v(" 命令来设置临时别名。这些别名只在当前会话中有效，关闭终端后会失效。")])]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[s._v("alias shortname"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("'long command'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("例如，要设置别名 "),a("code",[s._v("ll")]),s._v(" 用于替代 "),a("code",[s._v("ls -l")]),s._v(" 命令，可以执行：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("alias ll='ls -l'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",[a("li",[a("strong",[s._v("永久别名（对当前用户）：")]),s._v(" 要使别名在每次登录时都生效，你需要编辑你的用户主目录下的 "),a("code",[s._v(".bashrc")]),s._v(" 文件。")])]),s._v(" "),a("p",[s._v("打开 "),a("code",[s._v(".bashrc")]),s._v(" 文件，可以使用任何文本编辑器，比如 "),a("code",[s._v("nano")]),s._v(" 或 "),a("code",[s._v("vim")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("nano ~/.bashrc\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在文件末尾添加你的别名定义，然后保存并退出编辑器。例如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("alias ll='ls -l'\nalias gs='git status'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("然后执行以下命令以应用修改：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("source ~/.bashrc\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",[a("li",[a("strong",[s._v("永久别名（对所有用户）：")]),s._v(" 如果你想为所有用户设置别名，可以编辑系统范围的配置文件，通常是 "),a("code",[s._v("/etc/bash.bashrc")]),s._v(" 或 "),a("code",[s._v("/etc/profile")]),s._v("。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("sudo nano /etc/bash.bashrc\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在文件末尾添加你的别名定义，然后保存并退出编辑器。然后执行以下命令以应用修改：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("source /etc/bash.bashrc\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("无论使用哪种方法，别名都可以帮助你更方便地执行一些常用的命令，提高终端使用的效率。记得为别名选择易于记忆的短名称，并确保不会与现有命令冲突。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);