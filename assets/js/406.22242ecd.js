(window.webpackJsonp=window.webpackJsonp||[]).push([[406],{729:function(v,_,t){"use strict";t.r(_);var s=t(4),a=Object(s.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[_("img",{attrs:{src:"https%253A%252F%252F2290653824-github-io.oss-cn-hangzhou.aliyuncs.com%252Fimage-20230626154220585.png",alt:"image-20230626154220585"}})]),v._v(" "),_("blockquote",[_("p",[v._v("核心：如何构建一套可靠的大型分布式系统")])]),v._v(" "),_("h2",{attrs:{id:"演进中的架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#演进中的架构"}},[v._v("#")]),v._v(" 演进中的架构")]),v._v(" "),_("h3",{attrs:{id:"第一章-服务架构的演进史"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第一章-服务架构的演进史"}},[v._v("#")]),v._v(" 第一章 服务架构的演进史")]),v._v(" "),_("p",[v._v("①原始分布式")]),v._v(" "),_("blockquote",[_("p",[v._v("原始分布式的最大成果：这次尝试最大的收获就是对RPC、DFS等概念的开创，以及得到了一个价值千金的教训："),_("strong",[v._v("某个功能能够进行分布式，并不意味着它就应该进行分布式，强行追求透明的分布式操作，只会自寻苦果")]),v._v("。”")])]),v._v(" "),_("p",[v._v("进行分布式有代价，仅有两条路：一条是尽快提升单机的处理能力，以避免分布式带来的种种问题；另一条是找到更完美的、解决如何构建分布式系统的解决方案。")]),v._v(" "),_("p",[v._v("20世纪80年代，摩尔定律发挥重要作用，使微型计算机的性能以每两年增长一倍的惊人速度提升，"),_("strong",[v._v("且在很长的一段时间内，单体都将是软件架构的绝对主流")]),v._v("。")]),v._v(" "),_("blockquote",[_("ul",[_("li",[v._v("分布式初探")]),v._v(" "),_("li",[v._v("摩尔定律")])])]),v._v(" "),_("p",[v._v("②单体系统时代")]),v._v(" "),_("p",[v._v("在微服务时代之前，很少有关于单体应用开发的教程，其原因就是因为单体的开发真的很简单。")]),v._v(" "),_("p",[v._v("另外，单体在小型项目上是非常好的，不应该一味地准求技术潮流，只有在开发大型项目时，讨论分布式才有意义。")]),v._v(" "),_("p",[v._v("------------------------------------分割线-----------------------------")]),v._v(" "),_("p",[v._v("后续文章暂停更新")]),v._v(" "),_("ul",[_("li",[v._v("架构师的视角")]),v._v(" "),_("li",[v._v("分布式的基石")]),v._v(" "),_("li",[v._v("不可变的基础设施")]),v._v(" "),_("li",[v._v("技术方法论")])])])}),[],!1,null,null,null);_.default=a.exports}}]);