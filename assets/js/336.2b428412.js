(window.webpackJsonp=window.webpackJsonp||[]).push([[336],{659:function(e,v,t){"use strict";t.r(v);var _=t(4),l=Object(_.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h3",{attrs:{id:"简介"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),v("p",[e._v("在Go语言中，"),v("code",[e._v("list")]),e._v(" 包是标准库中 提供的一个双向链表（doubly linked list）实现。它提供了一种方便的数据结构，用于存储和操作双向链表的元素。")]),e._v(" "),v("h3",{attrs:{id:"如何使用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何使用"}},[e._v("#")]),e._v(" 如何使用")]),e._v(" "),v("ol",[v("li",[e._v("包 "),v("code",[e._v("container/list")])]),e._v(" "),v("li",[e._v("如何创建一个list"),v("code",[e._v("list:=list.New()")])])]),e._v(" "),v("h3",{attrs:{id:"常见方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常见方法"}},[e._v("#")]),e._v(" 常见方法")]),e._v(" "),v("ol",[v("li",[v("code",[e._v("list.List")]),e._v(" 类型："),v("code",[e._v("list.List")]),e._v(" 是双向链表的主要类型，表示一个双向链表的实例。它包含了双向链表的头部和尾部元素，以及当前链表中的元素数量。")]),e._v(" "),v("li",[v("code",[e._v("list.Element")]),e._v(" 类型："),v("code",[e._v("list.Element")]),e._v(" 表示 "),v("code",[e._v("list.List")]),e._v(" 中的一个元素，即链表中的节点。每个节点都包含了一个 "),v("code",[e._v("Value")]),e._v(" 字段，可以存储任意类型的数据。")]),e._v(" "),v("li",[v("code",[e._v("func (l *List) PushFront(v interface{}) *Element")]),e._v("：将一个值 "),v("code",[e._v("v")]),e._v(" 插入到双向链表的头部，并返回对应的链表元素 "),v("code",[e._v("Element")]),e._v("。")]),e._v(" "),v("li",[v("code",[e._v("func (l *List) PushBack(v interface{}) *Element")]),e._v("：将一个值 "),v("code",[e._v("v")]),e._v(" 插入到双向链表的尾部，并返回对应的链表元素 "),v("code",[e._v("Element")]),e._v("。")]),e._v(" "),v("li",[v("code",[e._v("func (l *List) Remove(e *Element)")]),e._v("：从链表中移除给定的链表元素 "),v("code",[e._v("e")]),e._v("。")]),e._v(" "),v("li",[v("code",[e._v("func (l *List) MoveToFront(e *Element)")]),e._v("：将给定的链表元素 "),v("code",[e._v("e")]),e._v(" 移动到链表的头部。")]),e._v(" "),v("li",[v("code",[e._v("func (l *List) MoveToBack(e *Element)")]),e._v("：将给定的链表元素 "),v("code",[e._v("e")]),e._v(" 移动到链表的尾部。")]),e._v(" "),v("li",[v("code",[e._v("func (l *List) Len() int")]),e._v("：返回链表中元素的数量。")]),e._v(" "),v("li",[v("code",[e._v("func (l *List) Front() *Element")]),e._v("：返回链表的头部元素。")]),e._v(" "),v("li",[v("code",[e._v("func (l *List) Back() *Element")]),e._v("：返回链表的尾部元素。")])]),e._v(" "),v("blockquote",[v("p",[e._v("比较java的LinkedList，java的LinkedList无法将某些元素移动到列表尾部或顶部，go可以通过这个特性很简单的实现LRU算法")])])])}),[],!1,null,null,null);v.default=l.exports}}]);