(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{404:function(t,_,a){"use strict";a.r(_);var v=a(4),e=Object(v.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"一-mat是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一-mat是什么"}},[t._v("#")]),t._v(" 一.MAT是什么？")]),t._v(" "),_("p",[t._v("MAT(Memory Analyzer Tool)，一个基于Eclipse的内存分析工具，是一个快速、功能丰富的JAVA heap分析工具，它可以帮助我们查找内存泄漏和减少内存消耗。使用内存分析工具从众多的对象中进行分析，快速的计算出在内存中对象的占用大小，看看是谁 阻止了垃圾收集器的回收工作，并可以通过报表直观的查看到可能造成这种结果的对象。")]),t._v(" "),_("h3",{attrs:{id:"_1-使用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用场景"}},[t._v("#")]),t._v(" 1. 使用场景")]),t._v(" "),_("p",[t._v("场景一：内存溢出，JVM堆区或方法区放不下存活及待申请的对象。如：高峰期系统出现 OOM（Out of Memory）异常，需定位内存瓶颈点来指导优化。")]),t._v(" "),_("p",[t._v("场景二：内存泄漏，不会再使用的对象无法被垃圾回收器回收。如：系统运行一段时间后出现 Full GC，甚至周期性 OOM 后需人工重启解决。")]),t._v(" "),_("p",[t._v("场景三：内存占用高。如：系统频繁 GC ，需定位影响服务实时性、稳定性、吞吐能力的原因。")]),t._v(" "),_("h2",{attrs:{id:"二-基础概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二-基础概念"}},[t._v("#")]),t._v(" 二.基础概念")]),t._v(" "),_("h3",{attrs:{id:"_1-heap-dump"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-heap-dump"}},[t._v("#")]),t._v(" 1. Heap Dump")]),t._v(" "),_("p",[t._v("Heap Dump 是 Java 进程堆内存在一个时间点的快照，支持 HPROF 及 DTFJ 格式，前者由 Oracle 系列 JVM 生成，后者是 IBM 系列 JVM 生成。其内容主要包含以下几类：")]),t._v(" "),_("ul",[_("li",[t._v("所有对象的实例信息：对象所属类名、基础类型和引用类型的属性等。")]),t._v(" "),_("li",[t._v("所有类信息：类加载器、类名、继承关系、静态属性等。")]),t._v(" "),_("li",[t._v("GC Root：GC Root 代表通过可达性分析来判定 JVM 对象是否存活的起始集合。JVM 采用追踪式垃圾回收（Tracing GC）模式，"),_("strong",[t._v("从所有 GC Roots 出发通过引用关系可以关联的对象")]),t._v("就是存活的（且不可回收），其余的不可达的对象（Unreachable object：如果无法从 GC Root 找到一条引用路径能到达某对象，则该对象为Unreachable object）可以回收。")]),t._v(" "),_("li",[t._v("线程栈及局部变量：快照生成时刻的所有线程的线程栈帧，以及每个线程栈的局部变量。")])]),t._v(" "),_("h3",{attrs:{id:"_2-shallow-heap"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-shallow-heap"}},[t._v("#")]),t._v(" 2. Shallow Heap")]),t._v(" "),_("p",[t._v("Shallow Heap 代表一个"),_("strong",[t._v("对象结构自身")]),t._v("所占用的内存大小，不包括其属性引用对象所占的内存。如 java.util.ArrayList 对象的 Shallow Heap 包含8字节的对象头、8字节的对象数组属性 elementData 引用 、 4字节的 size 属性、4字节的 modCount 属性（从 AbstractList 继承及对象头占用内存大小），有的对象可能需要加对齐填充但 ArrayList 自身已对齐不需补充，注意不包含 elementData 具体数据占用的内存大小。")]),t._v(" "),_("h3",{attrs:{id:"_3-retained-set"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-retained-set"}},[t._v("#")]),t._v(" 3. Retained Set")]),t._v(" "),_("p",[t._v("一个对象的 Retained Set，指的是该对象被 GC 回收后，所有能被回收的对象集合（如下图所示，G的 Retain Set 只有 G 并不包含 H，原因是虽然 H 也被 G 引用，但由于 H 也被 F 引用 ，G 被垃圾回收时无法释放 H）；另外，当该对象无法被 GC 回收，则其 Retained set 也必然无法被 GC 回收。")]),t._v(" "),_("h3",{attrs:{id:"_4-retained-heap"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-retained-heap"}},[t._v("#")]),t._v(" 4. Retained Heap")]),t._v(" "),_("p",[t._v("Retained Heap 是一个对象被 GC 回收后，可释放的内存大小，等于释放对象的 Retained Heap 中所有对象的 Shallow Heap 的和（如下图所示，E 的 Retain Heap 就是 G 与 E 的 Shallow Heap 总和，同理不包含 H）。")]),t._v(" "),_("h3",{attrs:{id:"_5-dominator-tree"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-dominator-tree"}},[t._v("#")]),t._v(" 5. Dominator tree")]),t._v(" "),_("p",[t._v("如果所有指向对象 Y 的路径都经过对象 X，则 X 支配（dominate） Y（如下图中，C、D 均支配 F，但 G 并不支配 H）。Dominator tree 是根据对象引用及支配关系生成的整体树状图，支配树清晰描述了对象间的依赖关系，下图左的 Dominator tree 如下图右下方支配树示意图所示。支配关系还有如下关系：")]),t._v(" "),_("ul",[_("li",[t._v("Dominator tree 中任一节点的子树就是被该节点支配的节点集合，也就是其 Retain Set。")]),t._v(" "),_("li",[t._v("如果 X 直接支配 Y，则 X 的所有支配节点均支配 Y。"),_("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230617105419228.png",alt:"image-20230617105419228"}})])]),t._v(" "),_("h3",{attrs:{id:"_6-oql"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-oql"}},[t._v("#")]),t._v(" 6. OQL")]),t._v(" "),_("p",[t._v("OQL 是类似于 SQL 的 MAT 专用统一查询语言，可以根据复杂的查询条件对 dump 文件中的类或者对象等数据进行查询筛选。")]),t._v(" "),_("h3",{attrs:{id:"_7-references"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-references"}},[t._v("#")]),t._v(" 7. references")]),t._v(" "),_("p",[t._v("outgoing references、incoming references 可以直击对象间依赖关系，MAT 也提供了链式快速操作。")]),t._v(" "),_("ul",[_("li",[t._v("outgoing references：对象引用的外部对象（注意不包含对象的基本类型属性。基本属性内容可在 inspector 查看）。")]),t._v(" "),_("li",[t._v("incoming references：直接引用了当前对象的对象，每个对象的 incoming references 可能有 0 到多个。")])]),t._v(" "),_("h2",{attrs:{id:"三-mat功能概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三-mat功能概述"}},[t._v("#")]),t._v(" 三.MAT功能概述")]),t._v(" "),_("p",[_("em",[t._v("注：MAT 的产品能力非常丰富，本文简要总结产品特性帮大家了解全貌，在下一篇文章《JVM 内存分析实战进阶篇——核心功能及应用场景》中，会详细展开介绍各项核心功能的场景、案例、最佳实践等。")])]),t._v(" "),_("p",[t._v("MAT 的工作原理是对 dump 文件建立多种索引，并基于索引来实现 [1]内存分布、[2]对象间依赖（如实体对象引用关系、线程引用关系、ClassLoader引用关系等）、[3]对象状态（内存占用量、字段属性值等）、[4]条件检索（OQL、正则匹配查询等）这四大核心功能，并通过可视化展现辅助 Developer 精细化了解 JVM 堆内存全貌。")]),t._v(" "),_("h3",{attrs:{id:"_1-内存分布"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-内存分布"}},[t._v("#")]),t._v(" 1. 内存分布")]),t._v(" "),_("ul",[_("li",[t._v("全局概览信息：堆内存大小、对象个数、类的个数、类加载器的个数、GC root 个数、线程概况等全局统计信息。")]),t._v(" "),_("li",[t._v("Dominator tree：按对象的 Retain Heap 排序，也支持按多个维度聚类统计，最常用的功能之一。")]),t._v(" "),_("li",[t._v("Histogram：罗列每个类实例的内存占比，包括自身内存占用量（Shallow Heap）及支配对象的内存占用量（Retain Heap），支持按 package、class loader、super class、class 聚类统计，最常用的功能之一。")]),t._v(" "),_("li",[t._v("Leak Suspects：直击引用链条上占用内存较多的可疑对象，可解决一些基础问题，但复杂的问题往往帮助有限。")]),t._v(" "),_("li",[t._v("Top Consumers：展现哪些类、哪些 class loader、哪些 package 占用最高比例的内存。")])]),t._v(" "),_("h3",{attrs:{id:"_2-对象间依赖"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-对象间依赖"}},[t._v("#")]),t._v(" 2. 对象间依赖")]),t._v(" "),_("ul",[_("li",[t._v("References：提供对象的外部引用关系、被引用关系。通过任一对象的直接引用及间接引用详情（主要是属性值及内存占用），进而提供完善的依赖链路详情。")]),t._v(" "),_("li",[t._v("Dominator tree：支持按对象的 Retain Heap 排序，并提供详细的支配关系，结合 references 可以实现大对象快速关联分析；")]),t._v(" "),_("li",[t._v("Thread overview：展现转储 dump 文件时线程栈帧等详细状态，也提供各线程的 Retain Heap 等关联内存信息。")]),t._v(" "),_("li",[t._v("Path To GC Roots：提供任一对象到GC Root的链路详情，帮助了解不能被 GC 回收的原因。")])]),t._v(" "),_("h3",{attrs:{id:"_3-对象状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-对象状态"}},[t._v("#")]),t._v(" 3. 对象状态")]),t._v(" "),_("ul",[_("li",[t._v("最核心的是通过 inspector 面板提供对象的属性信息、类继承关系信息等数据，协助分析内存占用高与业务逻辑的关系。")]),t._v(" "),_("li",[t._v("集合状态的检测，如：通过 ArrayList 或数组的填充率定位空集合空数组造成的内存浪费、通过 HashMap 冲突率判定 hash 策略是否合理等。")])]),t._v(" "),_("h3",{attrs:{id:"_4-按条件检索对象"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-按条件检索对象"}},[t._v("#")]),t._v(" 4. 按条件检索对象")]),t._v(" "),_("ul",[_("li",[t._v("OQL：提供一种类似于SQL的对象（类）级别统一结构化查询语言。如：查找 size＝0 且未使用过的 ArrayList：  select * from java.util.ArrayList where size=0 and modCount=0；查找所有的String的length属性的：  select s.length from instanceof String s。")]),t._v(" "),_("li",[t._v("内存分布及对象间依赖的众多功能，均支持按字符串检索、按正则检索等操作。")]),t._v(" "),_("li",[t._v("按虚拟内存地址寻址，根据对象的十六进制地址查找对象。")])]),t._v(" "),_("p",[t._v("此外，为了便于记忆与回顾，整理了如下脑图： "),_("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230617105341583.png",alt:"image-20230617105341583"}})]),t._v(" "),_("h2",{attrs:{id:"四-常见内存分析工具对比"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四-常见内存分析工具对比"}},[t._v("#")]),t._v(" 四.常见内存分析工具对比")]),t._v(" "),_("p",[t._v("下图中 Y 表示支持，N 表示不支持，时间截至发稿前。")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("产品功能")]),t._v(" "),_("th",[t._v("MAT")]),t._v(" "),_("th",[t._v("JProfiler")]),t._v(" "),_("th",[t._v("Visual VM")]),t._v(" "),_("th",[t._v("jhat")]),t._v(" "),_("th",[t._v("jmap")]),t._v(" "),_("th",[t._v("hprof")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("对象关联分析、深浅堆、GC ROOT、内存泄漏检测、线程分析、提供自定义程序扩展扩展")]),t._v(" "),_("td",[t._v("Y")]),t._v(" "),_("td",[t._v("N")]),t._v(" "),_("td",[t._v("N")]),t._v(" "),_("td",[t._v("N")]),t._v(" "),_("td",[t._v("N")]),t._v(" "),_("td",[t._v("N")])]),t._v(" "),_("tr",[_("td",[t._v("离线全局分析")]),t._v(" "),_("td",[t._v("Y")]),t._v(" "),_("td",[t._v("N")]),t._v(" "),_("td",[t._v("Y")]),t._v(" "),_("td",[t._v("Y")]),t._v(" "),_("td",[t._v("N")]),t._v(" "),_("td",[t._v("N")])]),t._v(" "),_("tr",[_("td",[t._v("内存实时分配情况")]),t._v(" "),_("td",[t._v("N")]),t._v(" "),_("td",[t._v("Y")]),t._v(" "),_("td",[t._v("Y")]),t._v(" "),_("td",[t._v("Y")]),t._v(" "),_("td",[t._v("Y")]),t._v(" "),_("td",[t._v("Y")])]),t._v(" "),_("tr",[_("td",[t._v("OQL")]),t._v(" "),_("td",[t._v("Y")]),t._v(" "),_("td",[t._v("N")]),t._v(" "),_("td",[t._v("Y")]),t._v(" "),_("td",[t._v("N")]),t._v(" "),_("td",[t._v("N")]),t._v(" "),_("td",[t._v("N")])]),t._v(" "),_("tr",[_("td",[t._v("内存分配堆栈、热点比例")]),t._v(" "),_("td",[t._v("N")]),t._v(" "),_("td",[t._v("Y")]),t._v(" "),_("td",[t._v("N")]),t._v(" "),_("td",[t._v("N")]),t._v(" "),_("td",[t._v("N")]),t._v(" "),_("td",[t._v("N")])]),t._v(" "),_("tr",[_("td",[t._v("堆外内存分析")]),t._v(" "),_("td",[t._v("N")]),t._v(" "),_("td",[t._v("N")]),t._v(" "),_("td",[t._v("N")]),t._v(" "),_("td",[t._v("N")]),t._v(" "),_("td",[t._v("N")]),t._v(" "),_("td",[t._v("N")])])])]),t._v(" "),_("p",[_("em",[t._v("注 1：Dump 文件包含快照被转储时刻的 Java 对象 在堆内存中的分布情况，但快照只是瞬间的记录，所以不包含对象在何时、在哪个方法中被分配这类信息。")])]),t._v(" "),_("p",[_("em",[t._v("注 2：一般堆外内存溢出排查可结合 gperftools 与 btrace 排查，此类文章较多不展开介绍。")])]),t._v(" "),_("h2",{attrs:{id:"五-mat-快速使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#五-mat-快速使用"}},[t._v("#")]),t._v(" 五.MAT 快速使用")]),t._v(" "),_("h3",{attrs:{id:"_1-下载"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-下载"}},[t._v("#")]),t._v(" 1. 下载")]),t._v(" "),_("p",[t._v("有两种方式")]),t._v(" "),_("ol",[_("li",[t._v("在Eclipse上安装对应的插件")]),t._v(" "),_("li",[t._v("直接下载独立版本的MAT")])]),t._v(" "),_("p",[t._v("本文才用方式二(原因是Eclipse已经很少用了，为了MAT去下载一个Eclipse大应用很麻烦)")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://www.eclipse.org/mat/downloads.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("MAT下载"),_("OutboundLink")],1)]),t._v(" "),_("p",[t._v("下载注意事项：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230616200352062.png",alt:"image-20230616200352062"}})]),t._v(" "),_("p",[t._v("注意MAT的版本对应的jdk版本，最新的MAT对应的是jdk17。我这里需要下载对应jdk8的版本。我下载的MAT版本是：MemoryAnalyzer-1.10.0.20200225")]),t._v(" "),_("h3",{attrs:{id:"_2-怎么得到一个dump文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-怎么得到一个dump文件"}},[t._v("#")]),t._v(" 2. 怎么得到一个dump文件？")]),t._v(" "),_("p",[t._v("获取堆快照 dump 文件（堆转储需要先执行 Full GC，线上服务使用时请注意影响），一般用三种方式：")]),t._v(" "),_("ul",[_("li",[t._v("使用 JDK 提供的 jmap 工具，命令是 jmap -dump:format=b,file=文件名 进程号。当进程接近僵死时，可以添加 -F 参数强制转储：jmap -F -dump:format=b,file=文件名 进程号。")])]),t._v(" "),_("ol",[_("li",[t._v("首先自己先启动一个java项目")]),t._v(" "),_("li",[t._v("使用jps命令查看java进程号")]),t._v(" "),_("li",[t._v("使用命令 "),_("code",[t._v("jmap -dump:format=b,file=文件名 进程号")]),t._v("将dump文件打印到指定位置")])]),t._v(" "),_("ul",[_("li",[t._v("本地运行的 Java 进程，直接在 MAT 使用 File → accquire heap dump 功能获取。")]),t._v(" "),_("li",[t._v("启动 Java 进程时配置JVM参数：-XX:-HeapDumpOnOutOfMemoryError，当发生 OOM 时无需人工干预会自动生成 dump文件。指定目录用 -XX:HeapDumpPath=文件路径 来设置。")])]),t._v(" "),_("h3",{attrs:{id:"_3-如何用mat打开我们的dump文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何用mat打开我们的dump文件"}},[t._v("#")]),t._v(" 3. 如何用MAT打开我们的dump文件？")]),t._v(" "),_("p",[t._v("通过File->open heap dump 即可")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230617103014848.png",alt:"image-20230617103014848"}})]),t._v(" "),_("p",[t._v("打开后，默认会打开这个页面：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230617103137811.png",alt:"image-20230617103137811"}})]),t._v(" "),_("p",[t._v("可以看到最上面的菜单栏，下面贴出相关的信息：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230617103256932.png",alt:"image-20230617103256932"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230617103930810.png",alt:"image-20230617103930810"}})]),t._v(" "),_("ul",[_("li",[t._v("details")])]),t._v(" "),_("p",[t._v("首先看看details所展现的内容：")]),t._v(" "),_("p",[t._v("Size：所占堆空间的大小")]),t._v(" "),_("p",[t._v("classes：类数量")]),t._v(" "),_("p",[t._v("objects：实例数量")]),t._v(" "),_("p",[t._v("class loader：类加载器数量")]),t._v(" "),_("p",[t._v("Unreachable Object Histogram：展现转储快照时可被回收的对象信息（一般不需要关注，除非 GC 频繁影响实时性的场景分析才用到）")]),t._v(" "),_("ul",[_("li",[t._v("Biggest Objects by Retained Size")])]),t._v(" "),_("p",[t._v("​\t展现经过统计过的哪几个实例所关联的对象占内存总和较高，以及具体占用的内存大小，一般相关代码比较简单情况下，往往可以直接分析具体的引用关系异常，如内存泄漏等。此外也包含了最大对象和链接支持继续深入分析。")]),t._v(" "),_("ul",[_("li",[t._v("actions")])]),t._v(" "),_("p",[t._v("MAT 分析过的 Top Consumers 、Leak Suspects等")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230617104528066.png",alt:"image-20230617104528066"}})]),t._v(" "),_("h3",{attrs:{id:"_4-常见的注意事项"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-常见的注意事项"}},[t._v("#")]),t._v(" 4. 常见的注意事项：")]),t._v(" "),_("p",[t._v("1、注意对运行进程的性能影响：Heap dump 时会先进行 Full GC，另外为保证对象数据视图一致，需要在安全点 Stop The World 暂停响应，线上服务进行务必注意性能影响。可以采取以下技巧减少影响：")]),t._v(" "),_("ul",[_("li",[t._v("先禁用入口流量，再执行 dump 动作。")]),t._v(" "),_("li",[t._v("选择影响较小时 dump 内存。")]),t._v(" "),_("li",[t._v("使用脚本捕获指定事件时 dump 内存。")])]),t._v(" "),_("p",[t._v("2、Dump 文件及建立的索引文件可能较大，如果开发机配置不足无法分析，可在服务器先执行分析后，基于分析后的索引文件直接查看结果，另外也需要注意磁盘占用问题：")]),t._v(" "),_("ul",[_("li",[t._v("大文件分析方法：一般 dump 文件不高于分析机主存 1.2 倍可直接在开发机分析；"),_("strong",[t._v("若 dump 文件过大，可以使用 MAT 提供的脚本在配置高的高配机器先建立索引再直接展现索引分析结果")]),t._v("（一般是 Linux 机器，可以使用 MAT 提供的脚本：./ParseHeapDump.sh $HEAPDUMP，堆信息有 unreachable 标记的垃圾对象，在 dump 时也保存了下来，默认不分析此部分数据，如需要在启动脚本 ParseHeapDump.sh 中加入：-keep_unreachable_objects）。")]),t._v(" "),_("li",[t._v("如果不关注堆中不可达对象，使用“live”参数可以减小文件大小，命令是 jmap -dump:live,format=b,file="),_("dumpfile",[_("pid")],1)],1),t._v(" "),_("li",[t._v("Dump 前主动手动执行一次 FULL GC ，去除无效对象进一步减少 dump 堆转储及建立索引的时间。")]),t._v(" "),_("li",[t._v("Dump文件巨大，建立索引后发现主视图中对象占用内存均较小，这是因为绝大部分对象未被 GC Roots 引用可释放。")]),t._v(" "),_("li",[t._v("Dump 时注意指定到空间较大的磁盘位置，避免打满分区影响服务。")]),t._v(" "),_("li",[t._v("建立 dump 索引机器的磁盘空间需要足够大，一般至少是 dump 文件的两倍，因为生成的中间索引文件也较大，如下图： "),_("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230617105218267.png",alt:"image-20230617105218267"}})])]),t._v(" "),_("p",[t._v("3、其他")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("JDK 版本问题：如遇“VMVersionMismatchException”，使用启动目标进程的 JDK 版本即可。")])]),t._v(" "),_("li",[_("p",[t._v("部分核心功能主界面未展现，问题足够复杂时需打开，如 MAT 默认不打开 inspector，如需根据对象数据值做业务分析，建议打开该视图。")])]),t._v(" "),_("li",[_("p",[t._v("配置了 HeapDumpOnOutOfMemoryError 参数，但 OutOfMemoryError 时但没有自动生成 dump 文件，可能原因有三个：")]),t._v(" "),_("ul",[_("li",[t._v("应用程序自行创建并抛出 OutOfMemoryError")]),t._v(" "),_("li",[t._v("进程的其他资源（如线程）已用尽")]),t._v(" "),_("li",[t._v("C 代码（如 JVM 源码）中堆耗尽，这种可能由于不同的原因而出现，例如在交换空间不足的情况下，进程限制用尽或仅地址空间的限制，此时 dump 文件分析并无实质性帮助。")])])])]),t._v(" "),_("p",[t._v("参考：")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://juejin.cn/post/6908665391136899079#heading-0",target:"_blank",rel:"noopener noreferrer"}},[t._v("JVM 内存分析工具 MAT 的深度讲解与实践——入门篇"),_("OutboundLink")],1)]),t._v(" "),_("p",[_("a",{attrs:{href:"https://juejin.cn/post/6911624328472133646",target:"_blank",rel:"noopener noreferrer"}},[t._v("JVM 内存分析工具 MAT 的深度讲解与实践——进阶篇"),_("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=e.exports}}]);