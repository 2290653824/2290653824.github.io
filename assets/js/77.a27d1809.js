(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{399:function(a,s,t){"use strict";t.r(s);var e=t(4),r=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"内存分配与回收原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存分配与回收原则"}},[a._v("#")]),a._v(" 内存分配与回收原则")]),a._v(" "),s("p",[a._v("首先对象一般优先在eden区进行分配，当eden没有足够的空间时，jvm将发起一次minor gc。")]),a._v(" "),s("h3",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")])]),a._v(" "),s("p",[a._v("那么哪些对象会直接进入老年代呢？")]),a._v(" "),s("ul",[s("li",[a._v("大对象直接进入老年代。")])]),a._v(" "),s("p",[a._v("大对象就是需要大量连续内存空间的对象（比如：字符串、数组）。")]),a._v(" "),s("p",[a._v("大对象直接进入老年代主要是为了避免为大对象分配内存时由于分配担保机制带来的复制而降低效率。")]),a._v(" "),s("ul",[s("li",[a._v("长期存活的对象")])]),a._v(" "),s("p",[a._v("大部分情况，对象都会首先在 Eden 区域分配。如果对象在 Eden 出生并经过第一次 Minor GC 后仍然能够存活，并且能被 Survivor 容纳的话，将被移动到 Survivor 空间（s0 或者 s1）中，并将对象年龄设为 1(Eden 区->Survivor 区后对象的初始年龄变为 1)。")]),a._v(" "),s("p",[a._v("对象在 Survivor 中每熬过一次 MinorGC,年龄就增加 1 岁，当它的年龄增加到一定程度（默认为 15 岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 "),s("code",[a._v("-XX:MaxTenuringThreshold")]),a._v(" 来设置。")]),a._v(" "),s("h2",{attrs:{id:"垃圾回收集中在哪些区域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收集中在哪些区域"}},[a._v("#")]),a._v(" 垃圾回收集中在哪些区域")]),a._v(" "),s("p",[a._v("针对 HotSpot VM 的实现，它里面的 GC 其实准确分类只有两大种：")]),a._v(" "),s("p",[a._v("部分收集 (Partial GC)：")]),a._v(" "),s("ul",[s("li",[a._v("新生代收集（Minor GC / Young GC）：只对新生代进行垃圾收集；")]),a._v(" "),s("li",[a._v("老年代收集（Major GC / Old GC）：只对老年代进行垃圾收集。需要注意的是 Major GC 在有的语境中也用于指代整堆收集；")]),a._v(" "),s("li",[a._v("混合收集（Mixed GC）：对整个新生代和部分老年代进行垃圾收集。")])]),a._v(" "),s("p",[a._v("整堆收集 (Full GC)：收集整个 Java 堆和方法区。")]),a._v(" "),s("h2",{attrs:{id:"什么是空间分配担保"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是空间分配担保"}},[a._v("#")]),a._v(" 什么是空间分配担保")]),a._v(" "),s("p",[a._v("空间分配担保是为了确保在 Minor GC 之前老年代本身还有容纳新生代"),s("strong",[a._v("所有对象")]),a._v("的剩余空间。")]),a._v(" "),s("p",[a._v("空间分配担保（Allocation Failure）是一种垃圾回收机制中的一种异常情况。在 JVM 中，对象的内存分配都是在新生代中进行的。在进行 Minor GC（新生代的垃圾回收）时，JVM 需要确保老年代有足够的空间来存放年轻代中所有存活的对象和新分配的对象。如果老年代空间不足，那么就必须立即进行 Full GC，才能释放老年代中的内存空间，否则就会出现“空间分配担保失败”的情况。")]),a._v(" "),s("p",[a._v("空间分配担保失败会导致 JVM 崩溃或抛出 OutOfMemoryError 异常。这是因为 JVM 已经没有足够的内存来分配对象，但又无法进行垃圾回收，从而导致了系统的崩溃或不可预知的行为。为了避免空间分配担保失败的情况，JVM 提供了内存担保机制，在进行 Minor GC 时会检查是否符合内存担保机制的条件，从而避免出现空间分配担保失败的情况。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/image-20230718194144372.png",alt:"image-20230718194144372"}})]),a._v(" "),s("p",[a._v("参考:"),s("a",{attrs:{href:"https://www.cnblogs.com/july-sunny/p/12618054.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("什么是空间分配担保"),s("OutboundLink")],1)]),a._v(" "),s("h2",{attrs:{id:"怎么判断对象是否死亡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么判断对象是否死亡"}},[a._v("#")]),a._v(" 怎么判断对象是否死亡")]),a._v(" "),s("p",[a._v("堆中几乎放着所有的对象实例，对堆垃圾回收前的第一步就是要判断哪些对象已经死亡（即不能再被任何途径使用的对象）。")]),a._v(" "),s("h3",{attrs:{id:"引用计数法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用计数法"}},[a._v("#")]),a._v(" 引用计数法")]),a._v(" "),s("p",[a._v("给对象中添加一个引用计数器：")]),a._v(" "),s("ul",[s("li",[a._v("每当有一个地方引用它，计数器就加 1；")]),a._v(" "),s("li",[a._v("当引用失效，计数器就减 1；")]),a._v(" "),s("li",[a._v("任何时候计数器为 0 的对象就是不可能再被使用的。")])]),a._v(" "),s("p",[s("strong",[a._v("这个方法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决对象之间相互循环引用的问题。")])]),a._v(" "),s("p",[a._v("所谓对象之间的相互引用问题，如下面代码所示：除了对象 "),s("code",[a._v("objA")]),a._v(" 和 "),s("code",[a._v("objB")]),a._v(" 相互引用着对方之外，这两个对象之间再无任何引用。但是他们因为互相引用对方，导致它们的引用计数器都不为 0，于是引用计数算法无法通知 GC 回收器回收他们。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ReferenceCountingGc")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ReferenceCountingGc")]),a._v(" objA "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ReferenceCountingGc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ReferenceCountingGc")]),a._v(" objB "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ReferenceCountingGc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        objA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" objB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        objB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" objA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        objA "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        objB "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br")])]),s("h3",{attrs:{id:"可达性分析算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可达性分析算法"}},[a._v("#")]),a._v(" 可达性分析算法")]),a._v(" "),s("p",[a._v("这个算法的基本思想就是通过一系列的称为 "),s("strong",[a._v("“GC Roots”")]),a._v(" 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的，需要被回收。")]),a._v(" "),s("p",[a._v("下图中的 "),s("code",[a._v("Object 6 ~ Object 10")]),a._v(" 之间虽有引用关系，但它们到 GC Roots 不可达，因此为需要被回收的对象。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/undefinedimage-20230318220747483.png",alt:"image-20230318220747483"}})]),a._v(" "),s("p",[s("strong",[a._v("哪些对象可以作为 GC Roots 呢？")])]),a._v(" "),s("ul",[s("li",[a._v("虚拟机栈(栈帧中的本地变量表)中引用的对象")]),a._v(" "),s("li",[a._v("本地方法栈(Native 方法)中引用的对象")]),a._v(" "),s("li",[a._v("方法区中类静态属性引用的对象")]),a._v(" "),s("li",[a._v("方法区中常量引用的对象")]),a._v(" "),s("li",[a._v("所有被同步锁持有的对象")])]),a._v(" "),s("p",[s("strong",[a._v("对象可以被回收，就代表一定会被回收吗？")])]),a._v(" "),s("p",[a._v("即使在可达性分析法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑阶段”，要真正宣告一个对象死亡，至少要经历两次标记过程；可达性分析法中不可达的对象被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行 "),s("code",[a._v("finalize")]),a._v(" 方法。当对象没有覆盖 "),s("code",[a._v("finalize")]),a._v(" 方法，或 "),s("code",[a._v("finalize")]),a._v(" 方法已经被虚拟机调用过时，虚拟机将这两种情况视为没有必要执行。")]),a._v(" "),s("p",[a._v("被判定为需要执行的对象将会被放在一个队列中进行第二次标记，除非这个对象与引用链上的任何一个对象建立关联，否则就会被真的回收。")]),a._v(" "),s("h2",{attrs:{id:"有哪些引用类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有哪些引用类型"}},[a._v("#")]),a._v(" 有哪些引用类型")]),a._v(" "),s("h3",{attrs:{id:"_1-强引用-strongreference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-强引用-strongreference"}},[a._v("#")]),a._v(" "),s("strong",[a._v("1．强引用（StrongReference）")])]),a._v(" "),s("p",[a._v("以前我们使用的大部分引用实际上都是强引用，这是使用最普遍的引用。如果一个对象具有强引用，那就类似于"),s("strong",[a._v("必不可少的生活用品")]),a._v("，垃圾回收器绝不会回收它。当内存空间不足，Java 虚拟机宁愿抛出 OutOfMemoryError 错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足问题。")]),a._v(" "),s("h3",{attrs:{id:"_2-软引用-softreference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-软引用-softreference"}},[a._v("#")]),a._v(" "),s("strong",[a._v("2．软引用（SoftReference）")])]),a._v(" "),s("p",[a._v("如果一个对象只具有软引用，那就类似于"),s("strong",[a._v("可有可无的生活用品")]),a._v("。如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。")]),a._v(" "),s("p",[a._v("软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收，JAVA 虚拟机就会把这个软引用加入到与之关联的引用队列中。")]),a._v(" "),s("h3",{attrs:{id:"_3-弱引用-weakreference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-弱引用-weakreference"}},[a._v("#")]),a._v(" "),s("strong",[a._v("3．弱引用（WeakReference）")])]),a._v(" "),s("p",[a._v("如果一个对象只具有弱引用，那就类似于"),s("strong",[a._v("可有可无的生活用品")]),a._v("。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。")]),a._v(" "),s("p",[a._v("弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java 虚拟机就会把这个弱引用加入到与之关联的引用队列中。")]),a._v(" "),s("h3",{attrs:{id:"_4-虚引用-phantomreference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-虚引用-phantomreference"}},[a._v("#")]),a._v(" "),s("strong",[a._v("4．虚引用（PhantomReference）")])]),a._v(" "),s("p",[a._v('"虚引用"顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。')]),a._v(" "),s("p",[s("strong",[a._v("虚引用主要用来跟踪对象被垃圾回收的活动")]),a._v("。")]),a._v(" "),s("p",[s("strong",[a._v("虚引用与软引用和弱引用的一个区别在于：")]),a._v(" 虚引用必须和引用队列（ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。")]),a._v(" "),s("p",[a._v("特别注意，在程序设计中一般很少使用弱引用与虚引用，使用软引用的情况较多，这是因为"),s("strong",[a._v("软引用可以加速 JVM 对垃圾内存的回收速度，可以维护系统的运行安全，防止内存溢出（OutOfMemory）等问题的产生")]),a._v("。")]),a._v(" "),s("h2",{attrs:{id:"怎么判断废弃常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么判断废弃常量"}},[a._v("#")]),a._v(" 怎么判断废弃常量")]),a._v(" "),s("p",[a._v("运行时常量池主要回收的是废弃的常量。那么，我们如何判断一个常量是废弃常量呢？")]),a._v(" "),s("p",[s("strong",[a._v("JDK1.7 及之后版本的 JVM 已经将运行时常量池从方法区中移了出来，在 Java 堆（Heap）中开辟了一块区域存放运行时常量池。")])]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("🐛 修正（参见："),s("a",{attrs:{href:"https://github.com/Snailclimb/JavaGuide/issues/747",target:"_blank",rel:"noopener noreferrer"}},[a._v("issue747open in new window"),s("OutboundLink")],1),a._v("，"),s("a",{attrs:{href:"https://blog.csdn.net/q5706503/article/details/84640762",target:"_blank",rel:"noopener noreferrer"}},[a._v("referenceopen in new window"),s("OutboundLink")],1),a._v("）")]),a._v(" ：")]),a._v(" "),s("ol",[s("li",[s("strong",[a._v("JDK1.7 之前运行时常量池逻辑包含字符串常量池存放在方法区, 此时 hotspot 虚拟机对方法区的实现为永久代")])]),a._v(" "),s("li",[s("strong",[a._v("JDK1.7 字符串常量池被从方法区拿到了堆中, 这里没有提到运行时常量池,也就是说字符串常量池被单独拿到堆,运行时常量池剩下的东西还在方法区, 也就是 hotspot 中的永久代")]),a._v(" 。")]),a._v(" "),s("li",[s("strong",[a._v("JDK1.8 hotspot 移除了永久代用元空间(Metaspace)取而代之, 这时候字符串常量池还在堆, 运行时常量池还在方法区, 只不过方法区的实现从永久代变成了元空间(Metaspace)")])])])]),a._v(" "),s("p",[a._v('假如在字符串常量池中存在字符串 "abc"，如果当前没有任何 String 对象引用该字符串常量的话，就说明常量 "abc" 就是废弃常量，如果这时发生内存回收的话而且有必要的话，"abc" 就会被系统清理出常量池了')]),a._v(" "),s("h2",{attrs:{id:"如何判断一个类是否废弃"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何判断一个类是否废弃"}},[a._v("#")]),a._v(" 如何判断一个类是否废弃")]),a._v(" "),s("p",[a._v("方法区主要回收的是无用的类，那么如何判断一个类是无用的类的呢？")]),a._v(" "),s("p",[a._v("判定一个常量是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多。类需要同时满足下面 3 个条件才能算是 "),s("strong",[a._v("“无用的类”")]),a._v(" ：")]),a._v(" "),s("ul",[s("li",[a._v("该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。")]),a._v(" "),s("li",[a._v("加载该类的 "),s("code",[a._v("ClassLoader")]),a._v(" 已经被回收。")]),a._v(" "),s("li",[a._v("该类对应的 "),s("code",[a._v("java.lang.Class")]),a._v(" 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。")])]),a._v(" "),s("p",[a._v("虚拟机可以对满足上述 3 个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样不使用了就会必然被回收。")]),a._v(" "),s("h2",{attrs:{id:"垃圾回收算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收算法"}},[a._v("#")]),a._v(" 垃圾回收算法")]),a._v(" "),s("h3",{attrs:{id:"标记清除算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标记清除算法"}},[a._v("#")]),a._v(" 标记清除算法")]),a._v(" "),s("p",[a._v("该算法分为“标记”和“清除”阶段：首先标记出所有不需要回收的对象，在标记完成后统一回收掉所有没有被标记的对象。它是最基础的收集算法，后续的算法都是对其不足进行改进得到。这种垃圾收集算法会带来两个明显的问题：")]),a._v(" "),s("ol",[s("li",[s("strong",[a._v("效率问题")])]),a._v(" "),s("li",[s("strong",[a._v("空间问题（标记清除后会产生大量不连续的碎片）")])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/undefinedimage-20230319114144492.png",alt:"image-20230319114144492"}})]),a._v(" "),s("h3",{attrs:{id:"标记复制算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标记复制算法"}},[a._v("#")]),a._v(" 标记复制算法")]),a._v(" "),s("p",[a._v("为了解决效率问题，“标记-复制”收集算法出现了。它可以将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/undefinedimage-20230319190430079.png",alt:"image-20230319190430079"}})]),a._v(" "),s("h3",{attrs:{id:"标记整理算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标记整理算法"}},[a._v("#")]),a._v(" 标记整理算法")]),a._v(" "),s("p",[a._v("根据老年代的特点提出的一种标记算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/undefinedimage-20230319190459155.png",alt:"image-20230319190459155"}})]),a._v(" "),s("h2",{attrs:{id:"垃圾回收器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器"}},[a._v("#")]),a._v(" 垃圾回收器")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/undefinedimage-20230319195111529.png",alt:"image-20230319195111529"}})]),a._v(" "),s("h3",{attrs:{id:"serial收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#serial收集器"}},[a._v("#")]),a._v(" Serial收集器")]),a._v(" "),s("p",[a._v("Serial（串行）收集器是最基本、历史最悠久的垃圾收集器了。大家看名字就知道这个收集器是一个单线程收集器了。它的 "),s("strong",[a._v("“单线程”")]),a._v(" 的意义不仅仅意味着它只会使用一条垃圾收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ "),s("strong",[a._v('"Stop The World"')]),a._v(" ），直到它收集结束。")]),a._v(" "),s("p",[s("strong",[a._v("新生代采用标记-复制算法，老年代采用标记-整理算法。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/undefinedimage-20230319191752848.png",alt:"image-20230319191752848"}})]),a._v(" "),s("p",[a._v("虚拟机的设计者们当然知道 Stop The World 带来的不良用户体验，所以在后续的垃圾收集器设计中停顿时间在不断缩短（仍然还有停顿，寻找最优秀的垃圾收集器的过程仍然在继续）。")]),a._v(" "),s("p",[a._v("但是 Serial 收集器有没有优于其他垃圾收集器的地方呢？当然有，它"),s("strong",[a._v("简单而高效（与其他收集器的单线程相比）")]),a._v("。Serial 收集器由于没有线程交互的开销，自然可以获得很高的单线程收集效率。Serial 收集器对于运行在 Client 模式下的虚拟机来说是个不错的选择。")]),a._v(" "),s("h3",{attrs:{id:"parnew"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parnew"}},[a._v("#")]),a._v(" ParNew")]),a._v(" "),s("p",[s("strong",[a._v("ParNew 收集器其实就是 Serial 收集器的多线程版本，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和 Serial 收集器完全一样。")])]),a._v(" "),s("p",[s("strong",[a._v("新生代采用标记-复制算法，老年代采用标记-整理算法。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/undefinedimage-20230319192444164.png",alt:"image-20230319192444164"}})]),a._v(" "),s("p",[a._v("它是许多运行在 Server 模式下的虚拟机的首要选择，除了 Serial 收集器外，只有它能与 CMS 收集器（真正意义上的并发收集器，后面会介绍到）配合工作。")]),a._v(" "),s("p",[s("strong",[a._v("并行和并发概念补充：")])]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("并行（Parallel）")]),a._v(" ：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。")]),a._v(" "),s("li",[s("strong",[a._v("并发（Concurrent）")]),a._v("：指用户线程与垃圾收集线程同时执行（但不一定是并行，可能会交替执行），用户程序在继续运行，而垃圾收集器运行在另一个 CPU 上。")])]),a._v(" "),s("h3",{attrs:{id:"parallel-scavenage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parallel-scavenage"}},[a._v("#")]),a._v(" Parallel Scavenage")]),a._v(" "),s("p",[a._v("Parallel Scavenge 收集器也是使用标记-复制算法的多线程收集器，它看上去几乎和 ParNew 都一样。 "),s("strong",[a._v("那么它有什么特别之处呢？")])]),a._v(" "),s("div",{staticClass:"language-text line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("-XX:+UseParallelGC\n\n    使用 Parallel 收集器+ 老年代串行\n\n-XX:+UseParallelOldGC\n\n    使用 Parallel 收集器+ 老年代并行\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("p",[s("strong",[a._v("Parallel Scavenge 收集器关注点是吞吐量（高效率的利用 CPU）。CMS 等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体验）。所谓吞吐量就是 CPU 中用于运行用户代码的时间与 CPU 总消耗时间的比值。")]),a._v(" Parallel Scavenge 收集器提供了很多参数供用户找到最合适的停顿时间或最大吞吐量，如果对于收集器运作不太了解，手工优化存在困难的时候，使用 Parallel Scavenge 收集器配合自适应调节策略，把内存管理优化交给虚拟机去完成也是一个不错的选择。")]),a._v(" "),s("p",[s("strong",[a._v("新生代采用标记-复制算法，老年代采用标记-整理算法")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/undefinedimage-20230319193233762.png",alt:"image-20230319193233762"}})]),a._v(" "),s("p",[s("strong",[a._v("这是 JDK1.8 默认收集器")])]),a._v(" "),s("p",[a._v("使用 "),s("code",[a._v("java -XX:+PrintCommandLineFlags -version")]),a._v(" 命令查看")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-XX:InitialHeapSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("262921408")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-XX:MaxHeapSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4206742528")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-XX:+PrintCommandLineFlags")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-XX:+UseCompressedClassPointers")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-XX:+UseCompressedOops")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-XX:+UseParallelGC")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("java")]),a._v(" version "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"1.8.0_211"')]),a._v("\nJava"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("TM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" SE Runtime Environment "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("build "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.8")]),a._v(".0_211-b12"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nJava HotSpot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("TM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("64")]),a._v("-Bit Server VM "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("build "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("25.211")]),a._v("-b12, mixed mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("JDK1.8 默认使用的是 Parallel Scavenge + Parallel Old，如果指定了-XX:+UseParallelGC 参数，则默认指定了-XX:+UseParallelOldGC，可以使用-XX:-UseParallelOldGC 来禁用该功能")]),a._v(" "),s("h3",{attrs:{id:"serial-old-收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#serial-old-收集器"}},[a._v("#")]),a._v(" Serial Old 收集器")]),a._v(" "),s("p",[s("strong",[a._v("Serial 收集器的老年代版本")]),a._v("，它同样是一个单线程收集器。它主要有两大用途：一种用途是在 JDK1.5 以及以前的版本中与 Parallel Scavenge 收集器搭配使用，另一种用途是作为 CMS 收集器的后备方案。")]),a._v(" "),s("h3",{attrs:{id:"parallel-old-收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parallel-old-收集器"}},[a._v("#")]),a._v(" Parallel Old 收集器")]),a._v(" "),s("p",[s("strong",[a._v("Parallel Scavenge 收集器的老年代版本")]),a._v("。使用多线程和“标记-整理”算法。在注重吞吐量以及 CPU 资源的场合，都可以优先考虑 Parallel Scavenge 收集器和 Parallel Old 收集器。")]),a._v(" "),s("h3",{attrs:{id:"cms-回收器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cms-回收器"}},[a._v("#")]),a._v(" CMS 回收器")]),a._v(" "),s("p",[s("strong",[a._v("CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它非常符合在注重用户体验的应用上使用。")])]),a._v(" "),s("p",[s("strong",[a._v("CMS（Concurrent Mark Sweep）收集器是 HotSpot 虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。")])]),a._v(" "),s("p",[a._v("从名字中的"),s("strong",[a._v("Mark Sweep")]),a._v("这两个词可以看出，CMS 收集器是一种 "),s("strong",[a._v("“标记-清除”算法")]),a._v("实现的，它的运作过程相比于前面几种垃圾收集器来说更加复杂一些。整个过程分为四个步骤：")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("初始标记：")]),a._v(" 暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ；")]),a._v(" "),s("li",[s("strong",[a._v("并发标记：")]),a._v(" 同时开启 GC 和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。")]),a._v(" "),s("li",[s("strong",[a._v("重新标记：")]),a._v(" 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短")]),a._v(" "),s("li",[s("strong",[a._v("并发清除：")]),a._v(" 开启用户线程，同时 GC 线程开始对未标记的区域做清扫。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://2290653824-github-io.oss-cn-hangzhou.aliyuncs.com/undefinedimage-20230319193655643.png",alt:"image-20230319193655643"}})]),a._v(" "),s("p",[a._v("从它的名字就可以看出它是一款优秀的垃圾收集器，主要优点："),s("strong",[a._v("并发收集、低停顿")]),a._v("。但是它有下面三个明显的缺点：")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("对 CPU 资源敏感；")])]),a._v(" "),s("li",[s("strong",[a._v("无法处理浮动垃圾；")])]),a._v(" "),s("li",[s("strong",[a._v("它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生。")])])]),a._v(" "),s("p",[a._v("CMS主要是回收老年代的对象")]),a._v(" "),s("h3",{attrs:{id:"g1-收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#g1-收集器"}},[a._v("#")]),a._v(" G1 收集器")]),a._v(" "),s("p",[s("strong",[a._v("G1 (Garbage-First) 是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足 GC 停顿时间要求的同时,还具备高吞吐量性能特征.")])]),a._v(" "),s("p",[a._v("被视为 JDK1.7 中 HotSpot 虚拟机的一个重要进化特征。它具备以下特点：")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("并行与并发")]),a._v("：G1 能充分利用 CPU、多核环境下的硬件优势，使用多个 CPU（CPU 或者 CPU 核心）来缩短 Stop-The-World 停顿时间。部分其他收集器原本需要停顿 Java 线程执行的 GC 动作，G1 收集器仍然可以通过并发的方式让 java 程序继续执行。")]),a._v(" "),s("li",[s("strong",[a._v("分代收集")]),a._v("：虽然 G1 可以不需要其他收集器配合就能独立管理整个 GC 堆，但是还是保留了分代的概念。")]),a._v(" "),s("li",[s("strong",[a._v("空间整合")]),a._v("：与 CMS 的“标记-清除”算法不同，G1 从整体来看是基于“标记-整理”算法实现的收集器；从局部上来看是基于“标记-复制”算法实现的。")]),a._v(" "),s("li",[s("strong",[a._v("可预测的停顿")]),a._v("：这是 G1 相对于 CMS 的另一个大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内。")])]),a._v(" "),s("p",[a._v("G1 收集器的运作大致分为以下几个步骤：")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("初始标记")])]),a._v(" "),s("li",[s("strong",[a._v("并发标记")])]),a._v(" "),s("li",[s("strong",[a._v("最终标记")])]),a._v(" "),s("li",[s("strong",[a._v("筛选回收")])])]),a._v(" "),s("p",[s("strong",[a._v("G1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region(这也就是它的名字 Garbage-First 的由来)")]),a._v(" 。这种使用 Region 划分内存空间以及有优先级的区域回收方式，保证了 G1 收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。")])])}),[],!1,null,null,null);s.default=r.exports}}]);